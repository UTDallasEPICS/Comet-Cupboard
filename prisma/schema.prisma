generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  netID     String     @id @map("net_id")
  Student   Student?
  Volunteer Volunteer?
  Admin     Admin?
  Cart      Cart?
  Orders    Order[]

  @@map("user")
}

model Student {
  User  User   @relation(fields: [netID], references: [netID], onDelete: Cascade, onUpdate: Cascade)
  netID String @id @map("net_id")

  @@map("student")
}

model Volunteer {
  User  User   @relation(fields: [netID], references: [netID], onDelete: Cascade, onUpdate: Cascade)
  netID String @id @map("net_id")

  @@map("volunteer")
}

model Admin {
  User  User   @relation(fields: [netID], references: [netID], onDelete: Cascade, onUpdate: Cascade)
  netID String @id @map("net_id")

  @@map("admin")
}

model Category {
  name  String @id @map("name")
  Items Item[]

  @@map("category")
}

model Item {
  itemID           String            @id @map("item_id")
  name             String            @map("name")
  Category         Category          @relation(fields: [categoryName], references: [name], onDelete: Restrict, onUpdate: Cascade)
  categoryName     String            @map("category_name")
  quantity         Int               @default(0) @map("quantity")
  Deal             Deal?
  imgURL           String            @map("img_url")
  archived         Boolean           @default(false) @map("archived")
  ItemCountChanges ItemCountChange[]
  CartItems        CartItem[]
  OrderItems       OrderItem[]

  @@map("item")
}

model ItemCountChange {
  countChangeID String   @id @map("count_change_id")
  date          DateTime @map("date")
  amountChanged Int      @map("amount_changed")
  Item          Item     @relation(fields: [itemID], references: [itemID], onDelete: Restrict, onUpdate: Cascade)
  itemID        String   @map("item_id")
  Source        Source   @relation(fields: [sourceName], references: [name], onDelete: NoAction, onUpdate: Cascade)
  sourceName    String   @map("source_name")

  @@map("item_count_change")
}

model Source {
  name             String            @id @map("name")
  ItemCountChanges ItemCountChange[]

  @@map("source")
}

model Cart {
  User      User       @relation(fields: [cartID], references: [netID], onDelete: Cascade, onUpdate: Cascade)
  cartID    String     @id @map("cart_id")
  date      DateTime   @map("date")
  CartItems CartItem[]
  pending   Boolean    @default(false) @map("pending")

  @@map("cart")
}

model CartItem {
  Item         Item   @relation(fields: [itemID], references: [itemID], onDelete: Restrict, onUpdate: Cascade)
  itemID       String @map("item_id")
  Cart         Cart   @relation(fields: [cartID], references: [cartID], onDelete: Cascade, onUpdate: Cascade)
  cartID       String @map("cart_id")
  count        Int    @map("count")
  expiredCount Int    @map("expired_count")

  @@id(name: "cartItemID", [itemID, cartID])
  @@map("cart_item")
}

model Order {
  orderID    String      @id @map("order_id")
  User       User        @relation(fields: [netID], references: [netID], onDelete: NoAction, onUpdate: Cascade)
  netID      String      @map("net_id")
  date       DateTime    @map("date")
  OrderItems OrderItem[]

  @@map("order")
}

model OrderItem {
  Item    Item   @relation(fields: [itemID], references: [itemID], onDelete: Restrict, onUpdate: Cascade)
  itemID  String @map("item_id")
  Order   Order  @relation(fields: [orderID], references: [orderID], onDelete: Restrict, onUpdate: Cascade)
  orderID String @map("order_id")
  count   Int    @map("count")

  @@id(name: "orderItemID", [itemID, orderID])
  @@map("order_item")
}

model Deal {
  Item          Item   @relation(fields: [itemID], references: [itemID], onDelete: Restrict, onUpdate: Cascade)
  itemID        String @id @map("item_id")
  actualCount   Int    @map("actual_count")
  adjustedCount Int    @map("adjusted_count")

  @@map("deal")
}
