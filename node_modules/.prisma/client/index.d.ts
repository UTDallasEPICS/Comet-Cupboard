
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cartItems
 * 
 */
export type cartItems = $Result.DefaultSelection<Prisma.$cartItemsPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model checkout
 * 
 */
export type checkout = $Result.DefaultSelection<Prisma.$checkoutPayload>
/**
 * Model checkoutItems
 * 
 */
export type checkoutItems = $Result.DefaultSelection<Prisma.$checkoutItemsPayload>
/**
 * Model donors
 * 
 */
export type donors = $Result.DefaultSelection<Prisma.$donorsPayload>
/**
 * Model employee
 * 
 */
export type employee = $Result.DefaultSelection<Prisma.$employeePayload>
/**
 * Model item
 * 
 */
export type item = $Result.DefaultSelection<Prisma.$itemPayload>
/**
 * Model student
 * 
 */
export type student = $Result.DefaultSelection<Prisma.$studentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const status: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type status = (typeof status)[keyof typeof status]

}

export type status = $Enums.status

export const status: typeof $Enums.status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CartItems
 * const cartItems = await prisma.cartItems.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CartItems
   * const cartItems = await prisma.cartItems.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cartItems`: Exposes CRUD operations for the **cartItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItems.findMany()
    * ```
    */
  get cartItems(): Prisma.cartItemsDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.checkout`: Exposes CRUD operations for the **checkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Checkouts
    * const checkouts = await prisma.checkout.findMany()
    * ```
    */
  get checkout(): Prisma.checkoutDelegate<ExtArgs>;

  /**
   * `prisma.checkoutItems`: Exposes CRUD operations for the **checkoutItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckoutItems
    * const checkoutItems = await prisma.checkoutItems.findMany()
    * ```
    */
  get checkoutItems(): Prisma.checkoutItemsDelegate<ExtArgs>;

  /**
   * `prisma.donors`: Exposes CRUD operations for the **donors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donors
    * const donors = await prisma.donors.findMany()
    * ```
    */
  get donors(): Prisma.donorsDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.employeeDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.itemDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.studentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cartItems: 'cartItems',
    categories: 'categories',
    checkout: 'checkout',
    checkoutItems: 'checkoutItems',
    donors: 'donors',
    employee: 'employee',
    item: 'item',
    student: 'student'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cartItems' | 'categories' | 'checkout' | 'checkoutItems' | 'donors' | 'employee' | 'item' | 'student'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cartItems: {
        payload: Prisma.$cartItemsPayload<ExtArgs>
        fields: Prisma.cartItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cartItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cartItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          findFirst: {
            args: Prisma.cartItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cartItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          findMany: {
            args: Prisma.cartItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>[]
          }
          create: {
            args: Prisma.cartItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          createMany: {
            args: Prisma.cartItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cartItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          update: {
            args: Prisma.cartItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          deleteMany: {
            args: Prisma.cartItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cartItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cartItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cartItemsPayload>
          }
          aggregate: {
            args: Prisma.CartItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCartItems>
          }
          groupBy: {
            args: Prisma.cartItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CartItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.cartItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<CartItemsCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      checkout: {
        payload: Prisma.$checkoutPayload<ExtArgs>
        fields: Prisma.checkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.checkoutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.checkoutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          findFirst: {
            args: Prisma.checkoutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.checkoutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          findMany: {
            args: Prisma.checkoutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>[]
          }
          create: {
            args: Prisma.checkoutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          createMany: {
            args: Prisma.checkoutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.checkoutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          update: {
            args: Prisma.checkoutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          deleteMany: {
            args: Prisma.checkoutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.checkoutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.checkoutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutPayload>
          }
          aggregate: {
            args: Prisma.CheckoutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCheckout>
          }
          groupBy: {
            args: Prisma.checkoutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CheckoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.checkoutCountArgs<ExtArgs>,
            result: $Utils.Optional<CheckoutCountAggregateOutputType> | number
          }
        }
      }
      checkoutItems: {
        payload: Prisma.$checkoutItemsPayload<ExtArgs>
        fields: Prisma.checkoutItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.checkoutItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.checkoutItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          findFirst: {
            args: Prisma.checkoutItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.checkoutItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          findMany: {
            args: Prisma.checkoutItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>[]
          }
          create: {
            args: Prisma.checkoutItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          createMany: {
            args: Prisma.checkoutItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.checkoutItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          update: {
            args: Prisma.checkoutItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          deleteMany: {
            args: Prisma.checkoutItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.checkoutItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.checkoutItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$checkoutItemsPayload>
          }
          aggregate: {
            args: Prisma.CheckoutItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCheckoutItems>
          }
          groupBy: {
            args: Prisma.checkoutItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CheckoutItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.checkoutItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<CheckoutItemsCountAggregateOutputType> | number
          }
        }
      }
      donors: {
        payload: Prisma.$donorsPayload<ExtArgs>
        fields: Prisma.donorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.donorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.donorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          findFirst: {
            args: Prisma.donorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.donorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          findMany: {
            args: Prisma.donorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>[]
          }
          create: {
            args: Prisma.donorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          createMany: {
            args: Prisma.donorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.donorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          update: {
            args: Prisma.donorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          deleteMany: {
            args: Prisma.donorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.donorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.donorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$donorsPayload>
          }
          aggregate: {
            args: Prisma.DonorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDonors>
          }
          groupBy: {
            args: Prisma.donorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DonorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.donorsCountArgs<ExtArgs>,
            result: $Utils.Optional<DonorsCountAggregateOutputType> | number
          }
        }
      }
      employee: {
        payload: Prisma.$employeePayload<ExtArgs>
        fields: Prisma.employeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.employeeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.employeeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          findFirst: {
            args: Prisma.employeeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.employeeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          findMany: {
            args: Prisma.employeeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>[]
          }
          create: {
            args: Prisma.employeeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          createMany: {
            args: Prisma.employeeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.employeeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          update: {
            args: Prisma.employeeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          deleteMany: {
            args: Prisma.employeeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.employeeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.employeeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$employeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.employeeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.employeeCountArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      item: {
        payload: Prisma.$itemPayload<ExtArgs>
        fields: Prisma.itemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.itemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.itemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          findFirst: {
            args: Prisma.itemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.itemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          findMany: {
            args: Prisma.itemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>[]
          }
          create: {
            args: Prisma.itemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          createMany: {
            args: Prisma.itemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.itemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          update: {
            args: Prisma.itemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          deleteMany: {
            args: Prisma.itemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.itemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.itemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$itemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.itemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.itemCountArgs<ExtArgs>,
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      student: {
        payload: Prisma.$studentPayload<ExtArgs>
        fields: Prisma.studentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          findFirst: {
            args: Prisma.studentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          findMany: {
            args: Prisma.studentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>[]
          }
          create: {
            args: Prisma.studentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          createMany: {
            args: Prisma.studentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.studentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          update: {
            args: Prisma.studentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          deleteMany: {
            args: Prisma.studentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.studentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.studentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.studentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.studentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    item: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | CategoriesCountOutputTypeCountItemArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: itemWhereInput
  }



  /**
   * Count Type CheckoutCountOutputType
   */

  export type CheckoutCountOutputType = {
    checkoutItems: number
  }

  export type CheckoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkoutItems?: boolean | CheckoutCountOutputTypeCountCheckoutItemsArgs
  }

  // Custom InputTypes

  /**
   * CheckoutCountOutputType without action
   */
  export type CheckoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckoutCountOutputType
     */
    select?: CheckoutCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CheckoutCountOutputType without action
   */
  export type CheckoutCountOutputTypeCountCheckoutItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutItemsWhereInput
  }



  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    checkout: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkout?: boolean | EmployeeCountOutputTypeCountCheckoutArgs
  }

  // Custom InputTypes

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutWhereInput
  }



  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    cartItems: number
    checkoutItems: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartItems?: boolean | ItemCountOutputTypeCountCartItemsArgs
    checkoutItems?: boolean | ItemCountOutputTypeCountCheckoutItemsArgs
  }

  // Custom InputTypes

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cartItemsWhereInput
  }


  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountCheckoutItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutItemsWhereInput
  }



  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    cartItems: number
    checkout: number
    employee: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartItems?: boolean | StudentCountOutputTypeCountCartItemsArgs
    checkout?: boolean | StudentCountOutputTypeCountCheckoutArgs
    employee?: boolean | StudentCountOutputTypeCountEmployeeArgs
  }

  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cartItemsWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCheckoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: employeeWhereInput
  }



  /**
   * Models
   */

  /**
   * Model cartItems
   */

  export type AggregateCartItems = {
    _count: CartItemsCountAggregateOutputType | null
    _avg: CartItemsAvgAggregateOutputType | null
    _sum: CartItemsSumAggregateOutputType | null
    _min: CartItemsMinAggregateOutputType | null
    _max: CartItemsMaxAggregateOutputType | null
  }

  export type CartItemsAvgAggregateOutputType = {
    cartID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CartItemsSumAggregateOutputType = {
    cartID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CartItemsMinAggregateOutputType = {
    cartID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CartItemsMaxAggregateOutputType = {
    cartID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CartItemsCountAggregateOutputType = {
    cartID: number
    itemID: number
    quantity: number
    value: number
    _all: number
  }


  export type CartItemsAvgAggregateInputType = {
    cartID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CartItemsSumAggregateInputType = {
    cartID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CartItemsMinAggregateInputType = {
    cartID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CartItemsMaxAggregateInputType = {
    cartID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CartItemsCountAggregateInputType = {
    cartID?: true
    itemID?: true
    quantity?: true
    value?: true
    _all?: true
  }

  export type CartItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cartItems to aggregate.
     */
    where?: cartItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cartItems to fetch.
     */
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cartItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cartItems
    **/
    _count?: true | CartItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemsMaxAggregateInputType
  }

  export type GetCartItemsAggregateType<T extends CartItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItems[P]>
      : GetScalarType<T[P], AggregateCartItems[P]>
  }




  export type cartItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cartItemsWhereInput
    orderBy?: cartItemsOrderByWithAggregationInput | cartItemsOrderByWithAggregationInput[]
    by: CartItemsScalarFieldEnum[] | CartItemsScalarFieldEnum
    having?: cartItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemsCountAggregateInputType | true
    _avg?: CartItemsAvgAggregateInputType
    _sum?: CartItemsSumAggregateInputType
    _min?: CartItemsMinAggregateInputType
    _max?: CartItemsMaxAggregateInputType
  }

  export type CartItemsGroupByOutputType = {
    cartID: number
    itemID: number
    quantity: number | null
    value: number | null
    _count: CartItemsCountAggregateOutputType | null
    _avg: CartItemsAvgAggregateOutputType | null
    _sum: CartItemsSumAggregateOutputType | null
    _min: CartItemsMinAggregateOutputType | null
    _max: CartItemsMaxAggregateOutputType | null
  }

  type GetCartItemsGroupByPayload<T extends cartItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemsGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemsGroupByOutputType[P]>
        }
      >
    >


  export type cartItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cartID?: boolean
    itemID?: boolean
    quantity?: boolean
    value?: boolean
    student?: boolean | studentDefaultArgs<ExtArgs>
    item?: boolean | itemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItems"]>

  export type cartItemsSelectScalar = {
    cartID?: boolean
    itemID?: boolean
    quantity?: boolean
    value?: boolean
  }

  export type cartItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | studentDefaultArgs<ExtArgs>
    item?: boolean | itemDefaultArgs<ExtArgs>
  }


  export type $cartItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cartItems"
    objects: {
      student: Prisma.$studentPayload<ExtArgs>
      item: Prisma.$itemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cartID: number
      itemID: number
      quantity: number | null
      value: number | null
    }, ExtArgs["result"]["cartItems"]>
    composites: {}
  }


  type cartItemsGetPayload<S extends boolean | null | undefined | cartItemsDefaultArgs> = $Result.GetResult<Prisma.$cartItemsPayload, S>

  type cartItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cartItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CartItemsCountAggregateInputType | true
    }

  export interface cartItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cartItems'], meta: { name: 'cartItems' } }
    /**
     * Find zero or one CartItems that matches the filter.
     * @param {cartItemsFindUniqueArgs} args - Arguments to find a CartItems
     * @example
     * // Get one CartItems
     * const cartItems = await prisma.cartItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cartItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CartItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cartItemsFindUniqueOrThrowArgs} args - Arguments to find a CartItems
     * @example
     * // Get one CartItems
     * const cartItems = await prisma.cartItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cartItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsFindFirstArgs} args - Arguments to find a CartItems
     * @example
     * // Get one CartItems
     * const cartItems = await prisma.cartItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cartItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsFindFirstArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CartItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsFindFirstOrThrowArgs} args - Arguments to find a CartItems
     * @example
     * // Get one CartItems
     * const cartItems = await prisma.cartItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cartItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItems.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItems.findMany({ take: 10 })
     * 
     * // Only select the `cartID`
     * const cartItemsWithCartIDOnly = await prisma.cartItems.findMany({ select: { cartID: true } })
     * 
    **/
    findMany<T extends cartItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CartItems.
     * @param {cartItemsCreateArgs} args - Arguments to create a CartItems.
     * @example
     * // Create one CartItems
     * const CartItems = await prisma.cartItems.create({
     *   data: {
     *     // ... data to create a CartItems
     *   }
     * })
     * 
    **/
    create<T extends cartItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsCreateArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CartItems.
     *     @param {cartItemsCreateManyArgs} args - Arguments to create many CartItems.
     *     @example
     *     // Create many CartItems
     *     const cartItems = await prisma.cartItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cartItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CartItems.
     * @param {cartItemsDeleteArgs} args - Arguments to delete one CartItems.
     * @example
     * // Delete one CartItems
     * const CartItems = await prisma.cartItems.delete({
     *   where: {
     *     // ... filter to delete one CartItems
     *   }
     * })
     * 
    **/
    delete<T extends cartItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsDeleteArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CartItems.
     * @param {cartItemsUpdateArgs} args - Arguments to update one CartItems.
     * @example
     * // Update one CartItems
     * const cartItems = await prisma.cartItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cartItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsUpdateArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CartItems.
     * @param {cartItemsDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cartItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cartItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItems = await prisma.cartItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cartItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CartItems.
     * @param {cartItemsUpsertArgs} args - Arguments to update or create a CartItems.
     * @example
     * // Update or create a CartItems
     * const cartItems = await prisma.cartItems.upsert({
     *   create: {
     *     // ... data to create a CartItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItems we want to update
     *   }
     * })
    **/
    upsert<T extends cartItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cartItemsUpsertArgs<ExtArgs>>
    ): Prisma__cartItemsClient<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItems.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends cartItemsCountArgs>(
      args?: Subset<T, cartItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemsAggregateArgs>(args: Subset<T, CartItemsAggregateArgs>): Prisma.PrismaPromise<GetCartItemsAggregateType<T>>

    /**
     * Group by CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cartItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cartItemsGroupByArgs['orderBy'] }
        : { orderBy?: cartItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cartItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cartItems model
   */
  readonly fields: cartItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cartItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cartItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends studentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentDefaultArgs<ExtArgs>>): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    item<T extends itemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, itemDefaultArgs<ExtArgs>>): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cartItems model
   */ 
  interface cartItemsFieldRefs {
    readonly cartID: FieldRef<"cartItems", 'Int'>
    readonly itemID: FieldRef<"cartItems", 'Int'>
    readonly quantity: FieldRef<"cartItems", 'Int'>
    readonly value: FieldRef<"cartItems", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * cartItems findUnique
   */
  export type cartItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter, which cartItems to fetch.
     */
    where: cartItemsWhereUniqueInput
  }


  /**
   * cartItems findUniqueOrThrow
   */
  export type cartItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter, which cartItems to fetch.
     */
    where: cartItemsWhereUniqueInput
  }


  /**
   * cartItems findFirst
   */
  export type cartItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter, which cartItems to fetch.
     */
    where?: cartItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cartItems to fetch.
     */
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cartItems.
     */
    cursor?: cartItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cartItems.
     */
    distinct?: CartItemsScalarFieldEnum | CartItemsScalarFieldEnum[]
  }


  /**
   * cartItems findFirstOrThrow
   */
  export type cartItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter, which cartItems to fetch.
     */
    where?: cartItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cartItems to fetch.
     */
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cartItems.
     */
    cursor?: cartItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cartItems.
     */
    distinct?: CartItemsScalarFieldEnum | CartItemsScalarFieldEnum[]
  }


  /**
   * cartItems findMany
   */
  export type cartItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter, which cartItems to fetch.
     */
    where?: cartItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cartItems to fetch.
     */
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cartItems.
     */
    cursor?: cartItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cartItems.
     */
    skip?: number
    distinct?: CartItemsScalarFieldEnum | CartItemsScalarFieldEnum[]
  }


  /**
   * cartItems create
   */
  export type cartItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a cartItems.
     */
    data: XOR<cartItemsCreateInput, cartItemsUncheckedCreateInput>
  }


  /**
   * cartItems createMany
   */
  export type cartItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cartItems.
     */
    data: cartItemsCreateManyInput | cartItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cartItems update
   */
  export type cartItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a cartItems.
     */
    data: XOR<cartItemsUpdateInput, cartItemsUncheckedUpdateInput>
    /**
     * Choose, which cartItems to update.
     */
    where: cartItemsWhereUniqueInput
  }


  /**
   * cartItems updateMany
   */
  export type cartItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cartItems.
     */
    data: XOR<cartItemsUpdateManyMutationInput, cartItemsUncheckedUpdateManyInput>
    /**
     * Filter which cartItems to update
     */
    where?: cartItemsWhereInput
  }


  /**
   * cartItems upsert
   */
  export type cartItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the cartItems to update in case it exists.
     */
    where: cartItemsWhereUniqueInput
    /**
     * In case the cartItems found by the `where` argument doesn't exist, create a new cartItems with this data.
     */
    create: XOR<cartItemsCreateInput, cartItemsUncheckedCreateInput>
    /**
     * In case the cartItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cartItemsUpdateInput, cartItemsUncheckedUpdateInput>
  }


  /**
   * cartItems delete
   */
  export type cartItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    /**
     * Filter which cartItems to delete.
     */
    where: cartItemsWhereUniqueInput
  }


  /**
   * cartItems deleteMany
   */
  export type cartItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cartItems to delete
     */
    where?: cartItemsWhereInput
  }


  /**
   * cartItems without action
   */
  export type cartItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
  }



  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    items: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    items: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    classification: string | null
    items: number | null
  }

  export type CategoriesMaxAggregateOutputType = {
    classification: string | null
    items: number | null
  }

  export type CategoriesCountAggregateOutputType = {
    classification: number
    items: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    items?: true
  }

  export type CategoriesSumAggregateInputType = {
    items?: true
  }

  export type CategoriesMinAggregateInputType = {
    classification?: true
    items?: true
  }

  export type CategoriesMaxAggregateInputType = {
    classification?: true
    items?: true
  }

  export type CategoriesCountAggregateInputType = {
    classification?: true
    items?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    classification: string
    items: number | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classification?: boolean
    items?: boolean
    item?: boolean | categories$itemArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    classification?: boolean
    items?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | categories$itemArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      item: Prisma.$itemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      classification: string
      items: number | null
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `classification`
     * const categoriesWithClassificationOnly = await prisma.categories.findMany({ select: { classification: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    item<T extends categories$itemArgs<ExtArgs> = {}>(args?: Subset<T, categories$itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly classification: FieldRef<"categories", 'String'>
    readonly items: FieldRef<"categories", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }


  /**
   * categories.item
   */
  export type categories$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    where?: itemWhereInput
    orderBy?: itemOrderByWithRelationInput | itemOrderByWithRelationInput[]
    cursor?: itemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
  }



  /**
   * Model checkout
   */

  export type AggregateCheckout = {
    _count: CheckoutCountAggregateOutputType | null
    _avg: CheckoutAvgAggregateOutputType | null
    _sum: CheckoutSumAggregateOutputType | null
    _min: CheckoutMinAggregateOutputType | null
    _max: CheckoutMaxAggregateOutputType | null
  }

  export type CheckoutAvgAggregateOutputType = {
    transactionID: number | null
    workerID: number | null
  }

  export type CheckoutSumAggregateOutputType = {
    transactionID: number | null
    workerID: number | null
  }

  export type CheckoutMinAggregateOutputType = {
    transactionID: number | null
    workerID: number | null
    customerID: string | null
    checkoutDate: Date | null
  }

  export type CheckoutMaxAggregateOutputType = {
    transactionID: number | null
    workerID: number | null
    customerID: string | null
    checkoutDate: Date | null
  }

  export type CheckoutCountAggregateOutputType = {
    transactionID: number
    workerID: number
    customerID: number
    checkoutDate: number
    _all: number
  }


  export type CheckoutAvgAggregateInputType = {
    transactionID?: true
    workerID?: true
  }

  export type CheckoutSumAggregateInputType = {
    transactionID?: true
    workerID?: true
  }

  export type CheckoutMinAggregateInputType = {
    transactionID?: true
    workerID?: true
    customerID?: true
    checkoutDate?: true
  }

  export type CheckoutMaxAggregateInputType = {
    transactionID?: true
    workerID?: true
    customerID?: true
    checkoutDate?: true
  }

  export type CheckoutCountAggregateInputType = {
    transactionID?: true
    workerID?: true
    customerID?: true
    checkoutDate?: true
    _all?: true
  }

  export type CheckoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which checkout to aggregate.
     */
    where?: checkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkouts to fetch.
     */
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: checkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned checkouts
    **/
    _count?: true | CheckoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckoutMaxAggregateInputType
  }

  export type GetCheckoutAggregateType<T extends CheckoutAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckout[P]>
      : GetScalarType<T[P], AggregateCheckout[P]>
  }




  export type checkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutWhereInput
    orderBy?: checkoutOrderByWithAggregationInput | checkoutOrderByWithAggregationInput[]
    by: CheckoutScalarFieldEnum[] | CheckoutScalarFieldEnum
    having?: checkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckoutCountAggregateInputType | true
    _avg?: CheckoutAvgAggregateInputType
    _sum?: CheckoutSumAggregateInputType
    _min?: CheckoutMinAggregateInputType
    _max?: CheckoutMaxAggregateInputType
  }

  export type CheckoutGroupByOutputType = {
    transactionID: number
    workerID: number | null
    customerID: string | null
    checkoutDate: Date | null
    _count: CheckoutCountAggregateOutputType | null
    _avg: CheckoutAvgAggregateOutputType | null
    _sum: CheckoutSumAggregateOutputType | null
    _min: CheckoutMinAggregateOutputType | null
    _max: CheckoutMaxAggregateOutputType | null
  }

  type GetCheckoutGroupByPayload<T extends checkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckoutGroupByOutputType[P]>
            : GetScalarType<T[P], CheckoutGroupByOutputType[P]>
        }
      >
    >


  export type checkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transactionID?: boolean
    workerID?: boolean
    customerID?: boolean
    checkoutDate?: boolean
    student?: boolean | checkout$studentArgs<ExtArgs>
    employee?: boolean | checkout$employeeArgs<ExtArgs>
    checkoutItems?: boolean | checkout$checkoutItemsArgs<ExtArgs>
    _count?: boolean | CheckoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkout"]>

  export type checkoutSelectScalar = {
    transactionID?: boolean
    workerID?: boolean
    customerID?: boolean
    checkoutDate?: boolean
  }

  export type checkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | checkout$studentArgs<ExtArgs>
    employee?: boolean | checkout$employeeArgs<ExtArgs>
    checkoutItems?: boolean | checkout$checkoutItemsArgs<ExtArgs>
    _count?: boolean | CheckoutCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $checkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "checkout"
    objects: {
      student: Prisma.$studentPayload<ExtArgs> | null
      employee: Prisma.$employeePayload<ExtArgs> | null
      checkoutItems: Prisma.$checkoutItemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      transactionID: number
      workerID: number | null
      customerID: string | null
      checkoutDate: Date | null
    }, ExtArgs["result"]["checkout"]>
    composites: {}
  }


  type checkoutGetPayload<S extends boolean | null | undefined | checkoutDefaultArgs> = $Result.GetResult<Prisma.$checkoutPayload, S>

  type checkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<checkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheckoutCountAggregateInputType | true
    }

  export interface checkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['checkout'], meta: { name: 'checkout' } }
    /**
     * Find zero or one Checkout that matches the filter.
     * @param {checkoutFindUniqueArgs} args - Arguments to find a Checkout
     * @example
     * // Get one Checkout
     * const checkout = await prisma.checkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends checkoutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutFindUniqueArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Checkout that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {checkoutFindUniqueOrThrowArgs} args - Arguments to find a Checkout
     * @example
     * // Get one Checkout
     * const checkout = await prisma.checkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends checkoutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Checkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutFindFirstArgs} args - Arguments to find a Checkout
     * @example
     * // Get one Checkout
     * const checkout = await prisma.checkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends checkoutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutFindFirstArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Checkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutFindFirstOrThrowArgs} args - Arguments to find a Checkout
     * @example
     * // Get one Checkout
     * const checkout = await prisma.checkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends checkoutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Checkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Checkouts
     * const checkouts = await prisma.checkout.findMany()
     * 
     * // Get first 10 Checkouts
     * const checkouts = await prisma.checkout.findMany({ take: 10 })
     * 
     * // Only select the `transactionID`
     * const checkoutWithTransactionIDOnly = await prisma.checkout.findMany({ select: { transactionID: true } })
     * 
    **/
    findMany<T extends checkoutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Checkout.
     * @param {checkoutCreateArgs} args - Arguments to create a Checkout.
     * @example
     * // Create one Checkout
     * const Checkout = await prisma.checkout.create({
     *   data: {
     *     // ... data to create a Checkout
     *   }
     * })
     * 
    **/
    create<T extends checkoutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutCreateArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Checkouts.
     *     @param {checkoutCreateManyArgs} args - Arguments to create many Checkouts.
     *     @example
     *     // Create many Checkouts
     *     const checkout = await prisma.checkout.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends checkoutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Checkout.
     * @param {checkoutDeleteArgs} args - Arguments to delete one Checkout.
     * @example
     * // Delete one Checkout
     * const Checkout = await prisma.checkout.delete({
     *   where: {
     *     // ... filter to delete one Checkout
     *   }
     * })
     * 
    **/
    delete<T extends checkoutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutDeleteArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Checkout.
     * @param {checkoutUpdateArgs} args - Arguments to update one Checkout.
     * @example
     * // Update one Checkout
     * const checkout = await prisma.checkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends checkoutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutUpdateArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Checkouts.
     * @param {checkoutDeleteManyArgs} args - Arguments to filter Checkouts to delete.
     * @example
     * // Delete a few Checkouts
     * const { count } = await prisma.checkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends checkoutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Checkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Checkouts
     * const checkout = await prisma.checkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends checkoutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Checkout.
     * @param {checkoutUpsertArgs} args - Arguments to update or create a Checkout.
     * @example
     * // Update or create a Checkout
     * const checkout = await prisma.checkout.upsert({
     *   create: {
     *     // ... data to create a Checkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Checkout we want to update
     *   }
     * })
    **/
    upsert<T extends checkoutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutUpsertArgs<ExtArgs>>
    ): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Checkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutCountArgs} args - Arguments to filter Checkouts to count.
     * @example
     * // Count the number of Checkouts
     * const count = await prisma.checkout.count({
     *   where: {
     *     // ... the filter for the Checkouts we want to count
     *   }
     * })
    **/
    count<T extends checkoutCountArgs>(
      args?: Subset<T, checkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Checkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckoutAggregateArgs>(args: Subset<T, CheckoutAggregateArgs>): Prisma.PrismaPromise<GetCheckoutAggregateType<T>>

    /**
     * Group by Checkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends checkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: checkoutGroupByArgs['orderBy'] }
        : { orderBy?: checkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, checkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the checkout model
   */
  readonly fields: checkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for checkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__checkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends checkout$studentArgs<ExtArgs> = {}>(args?: Subset<T, checkout$studentArgs<ExtArgs>>): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    employee<T extends checkout$employeeArgs<ExtArgs> = {}>(args?: Subset<T, checkout$employeeArgs<ExtArgs>>): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    checkoutItems<T extends checkout$checkoutItemsArgs<ExtArgs> = {}>(args?: Subset<T, checkout$checkoutItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the checkout model
   */ 
  interface checkoutFieldRefs {
    readonly transactionID: FieldRef<"checkout", 'Int'>
    readonly workerID: FieldRef<"checkout", 'Int'>
    readonly customerID: FieldRef<"checkout", 'String'>
    readonly checkoutDate: FieldRef<"checkout", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * checkout findUnique
   */
  export type checkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter, which checkout to fetch.
     */
    where: checkoutWhereUniqueInput
  }


  /**
   * checkout findUniqueOrThrow
   */
  export type checkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter, which checkout to fetch.
     */
    where: checkoutWhereUniqueInput
  }


  /**
   * checkout findFirst
   */
  export type checkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter, which checkout to fetch.
     */
    where?: checkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkouts to fetch.
     */
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for checkouts.
     */
    cursor?: checkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of checkouts.
     */
    distinct?: CheckoutScalarFieldEnum | CheckoutScalarFieldEnum[]
  }


  /**
   * checkout findFirstOrThrow
   */
  export type checkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter, which checkout to fetch.
     */
    where?: checkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkouts to fetch.
     */
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for checkouts.
     */
    cursor?: checkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of checkouts.
     */
    distinct?: CheckoutScalarFieldEnum | CheckoutScalarFieldEnum[]
  }


  /**
   * checkout findMany
   */
  export type checkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter, which checkouts to fetch.
     */
    where?: checkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkouts to fetch.
     */
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing checkouts.
     */
    cursor?: checkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkouts.
     */
    skip?: number
    distinct?: CheckoutScalarFieldEnum | CheckoutScalarFieldEnum[]
  }


  /**
   * checkout create
   */
  export type checkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a checkout.
     */
    data: XOR<checkoutCreateInput, checkoutUncheckedCreateInput>
  }


  /**
   * checkout createMany
   */
  export type checkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many checkouts.
     */
    data: checkoutCreateManyInput | checkoutCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * checkout update
   */
  export type checkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a checkout.
     */
    data: XOR<checkoutUpdateInput, checkoutUncheckedUpdateInput>
    /**
     * Choose, which checkout to update.
     */
    where: checkoutWhereUniqueInput
  }


  /**
   * checkout updateMany
   */
  export type checkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update checkouts.
     */
    data: XOR<checkoutUpdateManyMutationInput, checkoutUncheckedUpdateManyInput>
    /**
     * Filter which checkouts to update
     */
    where?: checkoutWhereInput
  }


  /**
   * checkout upsert
   */
  export type checkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the checkout to update in case it exists.
     */
    where: checkoutWhereUniqueInput
    /**
     * In case the checkout found by the `where` argument doesn't exist, create a new checkout with this data.
     */
    create: XOR<checkoutCreateInput, checkoutUncheckedCreateInput>
    /**
     * In case the checkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<checkoutUpdateInput, checkoutUncheckedUpdateInput>
  }


  /**
   * checkout delete
   */
  export type checkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    /**
     * Filter which checkout to delete.
     */
    where: checkoutWhereUniqueInput
  }


  /**
   * checkout deleteMany
   */
  export type checkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which checkouts to delete
     */
    where?: checkoutWhereInput
  }


  /**
   * checkout.student
   */
  export type checkout$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    where?: studentWhereInput
  }


  /**
   * checkout.employee
   */
  export type checkout$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    where?: employeeWhereInput
  }


  /**
   * checkout.checkoutItems
   */
  export type checkout$checkoutItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    where?: checkoutItemsWhereInput
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    cursor?: checkoutItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckoutItemsScalarFieldEnum | CheckoutItemsScalarFieldEnum[]
  }


  /**
   * checkout without action
   */
  export type checkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
  }



  /**
   * Model checkoutItems
   */

  export type AggregateCheckoutItems = {
    _count: CheckoutItemsCountAggregateOutputType | null
    _avg: CheckoutItemsAvgAggregateOutputType | null
    _sum: CheckoutItemsSumAggregateOutputType | null
    _min: CheckoutItemsMinAggregateOutputType | null
    _max: CheckoutItemsMaxAggregateOutputType | null
  }

  export type CheckoutItemsAvgAggregateOutputType = {
    transactionID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CheckoutItemsSumAggregateOutputType = {
    transactionID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CheckoutItemsMinAggregateOutputType = {
    transactionID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CheckoutItemsMaxAggregateOutputType = {
    transactionID: number | null
    itemID: number | null
    quantity: number | null
    value: number | null
  }

  export type CheckoutItemsCountAggregateOutputType = {
    transactionID: number
    itemID: number
    quantity: number
    value: number
    _all: number
  }


  export type CheckoutItemsAvgAggregateInputType = {
    transactionID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CheckoutItemsSumAggregateInputType = {
    transactionID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CheckoutItemsMinAggregateInputType = {
    transactionID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CheckoutItemsMaxAggregateInputType = {
    transactionID?: true
    itemID?: true
    quantity?: true
    value?: true
  }

  export type CheckoutItemsCountAggregateInputType = {
    transactionID?: true
    itemID?: true
    quantity?: true
    value?: true
    _all?: true
  }

  export type CheckoutItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which checkoutItems to aggregate.
     */
    where?: checkoutItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkoutItems to fetch.
     */
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: checkoutItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkoutItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkoutItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned checkoutItems
    **/
    _count?: true | CheckoutItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckoutItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckoutItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckoutItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckoutItemsMaxAggregateInputType
  }

  export type GetCheckoutItemsAggregateType<T extends CheckoutItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckoutItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckoutItems[P]>
      : GetScalarType<T[P], AggregateCheckoutItems[P]>
  }




  export type checkoutItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: checkoutItemsWhereInput
    orderBy?: checkoutItemsOrderByWithAggregationInput | checkoutItemsOrderByWithAggregationInput[]
    by: CheckoutItemsScalarFieldEnum[] | CheckoutItemsScalarFieldEnum
    having?: checkoutItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckoutItemsCountAggregateInputType | true
    _avg?: CheckoutItemsAvgAggregateInputType
    _sum?: CheckoutItemsSumAggregateInputType
    _min?: CheckoutItemsMinAggregateInputType
    _max?: CheckoutItemsMaxAggregateInputType
  }

  export type CheckoutItemsGroupByOutputType = {
    transactionID: number
    itemID: number
    quantity: number | null
    value: number | null
    _count: CheckoutItemsCountAggregateOutputType | null
    _avg: CheckoutItemsAvgAggregateOutputType | null
    _sum: CheckoutItemsSumAggregateOutputType | null
    _min: CheckoutItemsMinAggregateOutputType | null
    _max: CheckoutItemsMaxAggregateOutputType | null
  }

  type GetCheckoutItemsGroupByPayload<T extends checkoutItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckoutItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckoutItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckoutItemsGroupByOutputType[P]>
            : GetScalarType<T[P], CheckoutItemsGroupByOutputType[P]>
        }
      >
    >


  export type checkoutItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transactionID?: boolean
    itemID?: boolean
    quantity?: boolean
    value?: boolean
    item?: boolean | itemDefaultArgs<ExtArgs>
    checkout?: boolean | checkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkoutItems"]>

  export type checkoutItemsSelectScalar = {
    transactionID?: boolean
    itemID?: boolean
    quantity?: boolean
    value?: boolean
  }

  export type checkoutItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | itemDefaultArgs<ExtArgs>
    checkout?: boolean | checkoutDefaultArgs<ExtArgs>
  }


  export type $checkoutItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "checkoutItems"
    objects: {
      item: Prisma.$itemPayload<ExtArgs>
      checkout: Prisma.$checkoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      transactionID: number
      itemID: number
      quantity: number | null
      value: number | null
    }, ExtArgs["result"]["checkoutItems"]>
    composites: {}
  }


  type checkoutItemsGetPayload<S extends boolean | null | undefined | checkoutItemsDefaultArgs> = $Result.GetResult<Prisma.$checkoutItemsPayload, S>

  type checkoutItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<checkoutItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheckoutItemsCountAggregateInputType | true
    }

  export interface checkoutItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['checkoutItems'], meta: { name: 'checkoutItems' } }
    /**
     * Find zero or one CheckoutItems that matches the filter.
     * @param {checkoutItemsFindUniqueArgs} args - Arguments to find a CheckoutItems
     * @example
     * // Get one CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends checkoutItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CheckoutItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {checkoutItemsFindUniqueOrThrowArgs} args - Arguments to find a CheckoutItems
     * @example
     * // Get one CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends checkoutItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CheckoutItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsFindFirstArgs} args - Arguments to find a CheckoutItems
     * @example
     * // Get one CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends checkoutItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsFindFirstArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CheckoutItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsFindFirstOrThrowArgs} args - Arguments to find a CheckoutItems
     * @example
     * // Get one CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends checkoutItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CheckoutItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findMany()
     * 
     * // Get first 10 CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.findMany({ take: 10 })
     * 
     * // Only select the `transactionID`
     * const checkoutItemsWithTransactionIDOnly = await prisma.checkoutItems.findMany({ select: { transactionID: true } })
     * 
    **/
    findMany<T extends checkoutItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CheckoutItems.
     * @param {checkoutItemsCreateArgs} args - Arguments to create a CheckoutItems.
     * @example
     * // Create one CheckoutItems
     * const CheckoutItems = await prisma.checkoutItems.create({
     *   data: {
     *     // ... data to create a CheckoutItems
     *   }
     * })
     * 
    **/
    create<T extends checkoutItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsCreateArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CheckoutItems.
     *     @param {checkoutItemsCreateManyArgs} args - Arguments to create many CheckoutItems.
     *     @example
     *     // Create many CheckoutItems
     *     const checkoutItems = await prisma.checkoutItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends checkoutItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CheckoutItems.
     * @param {checkoutItemsDeleteArgs} args - Arguments to delete one CheckoutItems.
     * @example
     * // Delete one CheckoutItems
     * const CheckoutItems = await prisma.checkoutItems.delete({
     *   where: {
     *     // ... filter to delete one CheckoutItems
     *   }
     * })
     * 
    **/
    delete<T extends checkoutItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsDeleteArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CheckoutItems.
     * @param {checkoutItemsUpdateArgs} args - Arguments to update one CheckoutItems.
     * @example
     * // Update one CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends checkoutItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsUpdateArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CheckoutItems.
     * @param {checkoutItemsDeleteManyArgs} args - Arguments to filter CheckoutItems to delete.
     * @example
     * // Delete a few CheckoutItems
     * const { count } = await prisma.checkoutItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends checkoutItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, checkoutItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckoutItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends checkoutItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CheckoutItems.
     * @param {checkoutItemsUpsertArgs} args - Arguments to update or create a CheckoutItems.
     * @example
     * // Update or create a CheckoutItems
     * const checkoutItems = await prisma.checkoutItems.upsert({
     *   create: {
     *     // ... data to create a CheckoutItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckoutItems we want to update
     *   }
     * })
    **/
    upsert<T extends checkoutItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, checkoutItemsUpsertArgs<ExtArgs>>
    ): Prisma__checkoutItemsClient<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CheckoutItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsCountArgs} args - Arguments to filter CheckoutItems to count.
     * @example
     * // Count the number of CheckoutItems
     * const count = await prisma.checkoutItems.count({
     *   where: {
     *     // ... the filter for the CheckoutItems we want to count
     *   }
     * })
    **/
    count<T extends checkoutItemsCountArgs>(
      args?: Subset<T, checkoutItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckoutItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckoutItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckoutItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckoutItemsAggregateArgs>(args: Subset<T, CheckoutItemsAggregateArgs>): Prisma.PrismaPromise<GetCheckoutItemsAggregateType<T>>

    /**
     * Group by CheckoutItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {checkoutItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends checkoutItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: checkoutItemsGroupByArgs['orderBy'] }
        : { orderBy?: checkoutItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, checkoutItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckoutItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the checkoutItems model
   */
  readonly fields: checkoutItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for checkoutItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__checkoutItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    item<T extends itemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, itemDefaultArgs<ExtArgs>>): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    checkout<T extends checkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, checkoutDefaultArgs<ExtArgs>>): Prisma__checkoutClient<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the checkoutItems model
   */ 
  interface checkoutItemsFieldRefs {
    readonly transactionID: FieldRef<"checkoutItems", 'Int'>
    readonly itemID: FieldRef<"checkoutItems", 'Int'>
    readonly quantity: FieldRef<"checkoutItems", 'Int'>
    readonly value: FieldRef<"checkoutItems", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * checkoutItems findUnique
   */
  export type checkoutItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter, which checkoutItems to fetch.
     */
    where: checkoutItemsWhereUniqueInput
  }


  /**
   * checkoutItems findUniqueOrThrow
   */
  export type checkoutItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter, which checkoutItems to fetch.
     */
    where: checkoutItemsWhereUniqueInput
  }


  /**
   * checkoutItems findFirst
   */
  export type checkoutItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter, which checkoutItems to fetch.
     */
    where?: checkoutItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkoutItems to fetch.
     */
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for checkoutItems.
     */
    cursor?: checkoutItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkoutItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkoutItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of checkoutItems.
     */
    distinct?: CheckoutItemsScalarFieldEnum | CheckoutItemsScalarFieldEnum[]
  }


  /**
   * checkoutItems findFirstOrThrow
   */
  export type checkoutItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter, which checkoutItems to fetch.
     */
    where?: checkoutItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkoutItems to fetch.
     */
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for checkoutItems.
     */
    cursor?: checkoutItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkoutItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkoutItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of checkoutItems.
     */
    distinct?: CheckoutItemsScalarFieldEnum | CheckoutItemsScalarFieldEnum[]
  }


  /**
   * checkoutItems findMany
   */
  export type checkoutItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter, which checkoutItems to fetch.
     */
    where?: checkoutItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of checkoutItems to fetch.
     */
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing checkoutItems.
     */
    cursor?: checkoutItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` checkoutItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` checkoutItems.
     */
    skip?: number
    distinct?: CheckoutItemsScalarFieldEnum | CheckoutItemsScalarFieldEnum[]
  }


  /**
   * checkoutItems create
   */
  export type checkoutItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a checkoutItems.
     */
    data: XOR<checkoutItemsCreateInput, checkoutItemsUncheckedCreateInput>
  }


  /**
   * checkoutItems createMany
   */
  export type checkoutItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many checkoutItems.
     */
    data: checkoutItemsCreateManyInput | checkoutItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * checkoutItems update
   */
  export type checkoutItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a checkoutItems.
     */
    data: XOR<checkoutItemsUpdateInput, checkoutItemsUncheckedUpdateInput>
    /**
     * Choose, which checkoutItems to update.
     */
    where: checkoutItemsWhereUniqueInput
  }


  /**
   * checkoutItems updateMany
   */
  export type checkoutItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update checkoutItems.
     */
    data: XOR<checkoutItemsUpdateManyMutationInput, checkoutItemsUncheckedUpdateManyInput>
    /**
     * Filter which checkoutItems to update
     */
    where?: checkoutItemsWhereInput
  }


  /**
   * checkoutItems upsert
   */
  export type checkoutItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the checkoutItems to update in case it exists.
     */
    where: checkoutItemsWhereUniqueInput
    /**
     * In case the checkoutItems found by the `where` argument doesn't exist, create a new checkoutItems with this data.
     */
    create: XOR<checkoutItemsCreateInput, checkoutItemsUncheckedCreateInput>
    /**
     * In case the checkoutItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<checkoutItemsUpdateInput, checkoutItemsUncheckedUpdateInput>
  }


  /**
   * checkoutItems delete
   */
  export type checkoutItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    /**
     * Filter which checkoutItems to delete.
     */
    where: checkoutItemsWhereUniqueInput
  }


  /**
   * checkoutItems deleteMany
   */
  export type checkoutItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which checkoutItems to delete
     */
    where?: checkoutItemsWhereInput
  }


  /**
   * checkoutItems without action
   */
  export type checkoutItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
  }



  /**
   * Model donors
   */

  export type AggregateDonors = {
    _count: DonorsCountAggregateOutputType | null
    _avg: DonorsAvgAggregateOutputType | null
    _sum: DonorsSumAggregateOutputType | null
    _min: DonorsMinAggregateOutputType | null
    _max: DonorsMaxAggregateOutputType | null
  }

  export type DonorsAvgAggregateOutputType = {
    ID: number | null
    donationCount: number | null
    estDonValue: Decimal | null
  }

  export type DonorsSumAggregateOutputType = {
    ID: number | null
    donationCount: number | null
    estDonValue: Decimal | null
  }

  export type DonorsMinAggregateOutputType = {
    ID: number | null
    affiliation: string | null
    donationCount: number | null
    lastDonation: Date | null
    donationDescript: string | null
    estDonValue: Decimal | null
  }

  export type DonorsMaxAggregateOutputType = {
    ID: number | null
    affiliation: string | null
    donationCount: number | null
    lastDonation: Date | null
    donationDescript: string | null
    estDonValue: Decimal | null
  }

  export type DonorsCountAggregateOutputType = {
    ID: number
    affiliation: number
    donationCount: number
    lastDonation: number
    donationDescript: number
    estDonValue: number
    _all: number
  }


  export type DonorsAvgAggregateInputType = {
    ID?: true
    donationCount?: true
    estDonValue?: true
  }

  export type DonorsSumAggregateInputType = {
    ID?: true
    donationCount?: true
    estDonValue?: true
  }

  export type DonorsMinAggregateInputType = {
    ID?: true
    affiliation?: true
    donationCount?: true
    lastDonation?: true
    donationDescript?: true
    estDonValue?: true
  }

  export type DonorsMaxAggregateInputType = {
    ID?: true
    affiliation?: true
    donationCount?: true
    lastDonation?: true
    donationDescript?: true
    estDonValue?: true
  }

  export type DonorsCountAggregateInputType = {
    ID?: true
    affiliation?: true
    donationCount?: true
    lastDonation?: true
    donationDescript?: true
    estDonValue?: true
    _all?: true
  }

  export type DonorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which donors to aggregate.
     */
    where?: donorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donors to fetch.
     */
    orderBy?: donorsOrderByWithRelationInput | donorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: donorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned donors
    **/
    _count?: true | DonorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonorsMaxAggregateInputType
  }

  export type GetDonorsAggregateType<T extends DonorsAggregateArgs> = {
        [P in keyof T & keyof AggregateDonors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonors[P]>
      : GetScalarType<T[P], AggregateDonors[P]>
  }




  export type donorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: donorsWhereInput
    orderBy?: donorsOrderByWithAggregationInput | donorsOrderByWithAggregationInput[]
    by: DonorsScalarFieldEnum[] | DonorsScalarFieldEnum
    having?: donorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonorsCountAggregateInputType | true
    _avg?: DonorsAvgAggregateInputType
    _sum?: DonorsSumAggregateInputType
    _min?: DonorsMinAggregateInputType
    _max?: DonorsMaxAggregateInputType
  }

  export type DonorsGroupByOutputType = {
    ID: number
    affiliation: string | null
    donationCount: number | null
    lastDonation: Date | null
    donationDescript: string | null
    estDonValue: Decimal | null
    _count: DonorsCountAggregateOutputType | null
    _avg: DonorsAvgAggregateOutputType | null
    _sum: DonorsSumAggregateOutputType | null
    _min: DonorsMinAggregateOutputType | null
    _max: DonorsMaxAggregateOutputType | null
  }

  type GetDonorsGroupByPayload<T extends donorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonorsGroupByOutputType[P]>
            : GetScalarType<T[P], DonorsGroupByOutputType[P]>
        }
      >
    >


  export type donorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    affiliation?: boolean
    donationCount?: boolean
    lastDonation?: boolean
    donationDescript?: boolean
    estDonValue?: boolean
  }, ExtArgs["result"]["donors"]>

  export type donorsSelectScalar = {
    ID?: boolean
    affiliation?: boolean
    donationCount?: boolean
    lastDonation?: boolean
    donationDescript?: boolean
    estDonValue?: boolean
  }


  export type $donorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "donors"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      affiliation: string | null
      donationCount: number | null
      lastDonation: Date | null
      donationDescript: string | null
      estDonValue: Prisma.Decimal | null
    }, ExtArgs["result"]["donors"]>
    composites: {}
  }


  type donorsGetPayload<S extends boolean | null | undefined | donorsDefaultArgs> = $Result.GetResult<Prisma.$donorsPayload, S>

  type donorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<donorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DonorsCountAggregateInputType | true
    }

  export interface donorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['donors'], meta: { name: 'donors' } }
    /**
     * Find zero or one Donors that matches the filter.
     * @param {donorsFindUniqueArgs} args - Arguments to find a Donors
     * @example
     * // Get one Donors
     * const donors = await prisma.donors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends donorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, donorsFindUniqueArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Donors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {donorsFindUniqueOrThrowArgs} args - Arguments to find a Donors
     * @example
     * // Get one Donors
     * const donors = await prisma.donors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends donorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Donors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsFindFirstArgs} args - Arguments to find a Donors
     * @example
     * // Get one Donors
     * const donors = await prisma.donors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends donorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsFindFirstArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Donors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsFindFirstOrThrowArgs} args - Arguments to find a Donors
     * @example
     * // Get one Donors
     * const donors = await prisma.donors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends donorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Donors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donors
     * const donors = await prisma.donors.findMany()
     * 
     * // Get first 10 Donors
     * const donors = await prisma.donors.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const donorsWithIDOnly = await prisma.donors.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends donorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Donors.
     * @param {donorsCreateArgs} args - Arguments to create a Donors.
     * @example
     * // Create one Donors
     * const Donors = await prisma.donors.create({
     *   data: {
     *     // ... data to create a Donors
     *   }
     * })
     * 
    **/
    create<T extends donorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, donorsCreateArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Donors.
     *     @param {donorsCreateManyArgs} args - Arguments to create many Donors.
     *     @example
     *     // Create many Donors
     *     const donors = await prisma.donors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends donorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Donors.
     * @param {donorsDeleteArgs} args - Arguments to delete one Donors.
     * @example
     * // Delete one Donors
     * const Donors = await prisma.donors.delete({
     *   where: {
     *     // ... filter to delete one Donors
     *   }
     * })
     * 
    **/
    delete<T extends donorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, donorsDeleteArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Donors.
     * @param {donorsUpdateArgs} args - Arguments to update one Donors.
     * @example
     * // Update one Donors
     * const donors = await prisma.donors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends donorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, donorsUpdateArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Donors.
     * @param {donorsDeleteManyArgs} args - Arguments to filter Donors to delete.
     * @example
     * // Delete a few Donors
     * const { count } = await prisma.donors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends donorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, donorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donors
     * const donors = await prisma.donors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends donorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, donorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Donors.
     * @param {donorsUpsertArgs} args - Arguments to update or create a Donors.
     * @example
     * // Update or create a Donors
     * const donors = await prisma.donors.upsert({
     *   create: {
     *     // ... data to create a Donors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donors we want to update
     *   }
     * })
    **/
    upsert<T extends donorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, donorsUpsertArgs<ExtArgs>>
    ): Prisma__donorsClient<$Result.GetResult<Prisma.$donorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsCountArgs} args - Arguments to filter Donors to count.
     * @example
     * // Count the number of Donors
     * const count = await prisma.donors.count({
     *   where: {
     *     // ... the filter for the Donors we want to count
     *   }
     * })
    **/
    count<T extends donorsCountArgs>(
      args?: Subset<T, donorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonorsAggregateArgs>(args: Subset<T, DonorsAggregateArgs>): Prisma.PrismaPromise<GetDonorsAggregateType<T>>

    /**
     * Group by Donors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends donorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: donorsGroupByArgs['orderBy'] }
        : { orderBy?: donorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, donorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the donors model
   */
  readonly fields: donorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for donors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__donorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the donors model
   */ 
  interface donorsFieldRefs {
    readonly ID: FieldRef<"donors", 'Int'>
    readonly affiliation: FieldRef<"donors", 'String'>
    readonly donationCount: FieldRef<"donors", 'Int'>
    readonly lastDonation: FieldRef<"donors", 'DateTime'>
    readonly donationDescript: FieldRef<"donors", 'String'>
    readonly estDonValue: FieldRef<"donors", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * donors findUnique
   */
  export type donorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter, which donors to fetch.
     */
    where: donorsWhereUniqueInput
  }


  /**
   * donors findUniqueOrThrow
   */
  export type donorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter, which donors to fetch.
     */
    where: donorsWhereUniqueInput
  }


  /**
   * donors findFirst
   */
  export type donorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter, which donors to fetch.
     */
    where?: donorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donors to fetch.
     */
    orderBy?: donorsOrderByWithRelationInput | donorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donors.
     */
    cursor?: donorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donors.
     */
    distinct?: DonorsScalarFieldEnum | DonorsScalarFieldEnum[]
  }


  /**
   * donors findFirstOrThrow
   */
  export type donorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter, which donors to fetch.
     */
    where?: donorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donors to fetch.
     */
    orderBy?: donorsOrderByWithRelationInput | donorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donors.
     */
    cursor?: donorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donors.
     */
    distinct?: DonorsScalarFieldEnum | DonorsScalarFieldEnum[]
  }


  /**
   * donors findMany
   */
  export type donorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter, which donors to fetch.
     */
    where?: donorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donors to fetch.
     */
    orderBy?: donorsOrderByWithRelationInput | donorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing donors.
     */
    cursor?: donorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donors.
     */
    skip?: number
    distinct?: DonorsScalarFieldEnum | DonorsScalarFieldEnum[]
  }


  /**
   * donors create
   */
  export type donorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * The data needed to create a donors.
     */
    data: XOR<donorsCreateInput, donorsUncheckedCreateInput>
  }


  /**
   * donors createMany
   */
  export type donorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many donors.
     */
    data: donorsCreateManyInput | donorsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * donors update
   */
  export type donorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * The data needed to update a donors.
     */
    data: XOR<donorsUpdateInput, donorsUncheckedUpdateInput>
    /**
     * Choose, which donors to update.
     */
    where: donorsWhereUniqueInput
  }


  /**
   * donors updateMany
   */
  export type donorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update donors.
     */
    data: XOR<donorsUpdateManyMutationInput, donorsUncheckedUpdateManyInput>
    /**
     * Filter which donors to update
     */
    where?: donorsWhereInput
  }


  /**
   * donors upsert
   */
  export type donorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * The filter to search for the donors to update in case it exists.
     */
    where: donorsWhereUniqueInput
    /**
     * In case the donors found by the `where` argument doesn't exist, create a new donors with this data.
     */
    create: XOR<donorsCreateInput, donorsUncheckedCreateInput>
    /**
     * In case the donors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<donorsUpdateInput, donorsUncheckedUpdateInput>
  }


  /**
   * donors delete
   */
  export type donorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
    /**
     * Filter which donors to delete.
     */
    where: donorsWhereUniqueInput
  }


  /**
   * donors deleteMany
   */
  export type donorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which donors to delete
     */
    where?: donorsWhereInput
  }


  /**
   * donors without action
   */
  export type donorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donors
     */
    select?: donorsSelect<ExtArgs> | null
  }



  /**
   * Model employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    ID: number | null
    hoursWorked: number | null
    salary: Decimal | null
  }

  export type EmployeeSumAggregateOutputType = {
    ID: number | null
    hoursWorked: number | null
    salary: Decimal | null
  }

  export type EmployeeMinAggregateOutputType = {
    ID: number | null
    studentID: string | null
    hoursWorked: number | null
    isPaid: boolean | null
    salary: Decimal | null
  }

  export type EmployeeMaxAggregateOutputType = {
    ID: number | null
    studentID: string | null
    hoursWorked: number | null
    isPaid: boolean | null
    salary: Decimal | null
  }

  export type EmployeeCountAggregateOutputType = {
    ID: number
    studentID: number
    hoursWorked: number
    isPaid: number
    salary: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    ID?: true
    hoursWorked?: true
    salary?: true
  }

  export type EmployeeSumAggregateInputType = {
    ID?: true
    hoursWorked?: true
    salary?: true
  }

  export type EmployeeMinAggregateInputType = {
    ID?: true
    studentID?: true
    hoursWorked?: true
    isPaid?: true
    salary?: true
  }

  export type EmployeeMaxAggregateInputType = {
    ID?: true
    studentID?: true
    hoursWorked?: true
    isPaid?: true
    salary?: true
  }

  export type EmployeeCountAggregateInputType = {
    ID?: true
    studentID?: true
    hoursWorked?: true
    isPaid?: true
    salary?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employee to aggregate.
     */
    where?: employeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeeOrderByWithRelationInput | employeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type employeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: employeeWhereInput
    orderBy?: employeeOrderByWithAggregationInput | employeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: employeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    ID: number
    studentID: string | null
    hoursWorked: number | null
    isPaid: boolean | null
    salary: Decimal | null
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends employeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type employeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    studentID?: boolean
    hoursWorked?: boolean
    isPaid?: boolean
    salary?: boolean
    checkout?: boolean | employee$checkoutArgs<ExtArgs>
    student?: boolean | employee$studentArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type employeeSelectScalar = {
    ID?: boolean
    studentID?: boolean
    hoursWorked?: boolean
    isPaid?: boolean
    salary?: boolean
  }

  export type employeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkout?: boolean | employee$checkoutArgs<ExtArgs>
    student?: boolean | employee$studentArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $employeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "employee"
    objects: {
      checkout: Prisma.$checkoutPayload<ExtArgs>[]
      student: Prisma.$studentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      studentID: string | null
      hoursWorked: number | null
      isPaid: boolean | null
      salary: Prisma.Decimal | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }


  type employeeGetPayload<S extends boolean | null | undefined | employeeDefaultArgs> = $Result.GetResult<Prisma.$employeePayload, S>

  type employeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<employeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface employeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['employee'], meta: { name: 'employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {employeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends employeeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, employeeFindUniqueArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {employeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends employeeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends employeeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeFindFirstArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends employeeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const employeeWithIDOnly = await prisma.employee.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends employeeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Employee.
     * @param {employeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends employeeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, employeeCreateArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Employees.
     *     @param {employeeCreateManyArgs} args - Arguments to create many Employees.
     *     @example
     *     // Create many Employees
     *     const employee = await prisma.employee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends employeeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {employeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends employeeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, employeeDeleteArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {employeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends employeeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, employeeUpdateArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {employeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends employeeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, employeeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends employeeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, employeeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {employeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends employeeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, employeeUpsertArgs<ExtArgs>>
    ): Prisma__employeeClient<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends employeeCountArgs>(
      args?: Subset<T, employeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends employeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: employeeGroupByArgs['orderBy'] }
        : { orderBy?: employeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, employeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the employee model
   */
  readonly fields: employeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__employeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    checkout<T extends employee$checkoutArgs<ExtArgs> = {}>(args?: Subset<T, employee$checkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    student<T extends employee$studentArgs<ExtArgs> = {}>(args?: Subset<T, employee$studentArgs<ExtArgs>>): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the employee model
   */ 
  interface employeeFieldRefs {
    readonly ID: FieldRef<"employee", 'Int'>
    readonly studentID: FieldRef<"employee", 'String'>
    readonly hoursWorked: FieldRef<"employee", 'Int'>
    readonly isPaid: FieldRef<"employee", 'Boolean'>
    readonly salary: FieldRef<"employee", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * employee findUnique
   */
  export type employeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter, which employee to fetch.
     */
    where: employeeWhereUniqueInput
  }


  /**
   * employee findUniqueOrThrow
   */
  export type employeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter, which employee to fetch.
     */
    where: employeeWhereUniqueInput
  }


  /**
   * employee findFirst
   */
  export type employeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter, which employee to fetch.
     */
    where?: employeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeeOrderByWithRelationInput | employeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * employee findFirstOrThrow
   */
  export type employeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter, which employee to fetch.
     */
    where?: employeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeeOrderByWithRelationInput | employeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * employee findMany
   */
  export type employeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeeOrderByWithRelationInput | employeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employees.
     */
    cursor?: employeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * employee create
   */
  export type employeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * The data needed to create a employee.
     */
    data: XOR<employeeCreateInput, employeeUncheckedCreateInput>
  }


  /**
   * employee createMany
   */
  export type employeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many employees.
     */
    data: employeeCreateManyInput | employeeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * employee update
   */
  export type employeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * The data needed to update a employee.
     */
    data: XOR<employeeUpdateInput, employeeUncheckedUpdateInput>
    /**
     * Choose, which employee to update.
     */
    where: employeeWhereUniqueInput
  }


  /**
   * employee updateMany
   */
  export type employeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update employees.
     */
    data: XOR<employeeUpdateManyMutationInput, employeeUncheckedUpdateManyInput>
    /**
     * Filter which employees to update
     */
    where?: employeeWhereInput
  }


  /**
   * employee upsert
   */
  export type employeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * The filter to search for the employee to update in case it exists.
     */
    where: employeeWhereUniqueInput
    /**
     * In case the employee found by the `where` argument doesn't exist, create a new employee with this data.
     */
    create: XOR<employeeCreateInput, employeeUncheckedCreateInput>
    /**
     * In case the employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<employeeUpdateInput, employeeUncheckedUpdateInput>
  }


  /**
   * employee delete
   */
  export type employeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    /**
     * Filter which employee to delete.
     */
    where: employeeWhereUniqueInput
  }


  /**
   * employee deleteMany
   */
  export type employeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employees to delete
     */
    where?: employeeWhereInput
  }


  /**
   * employee.checkout
   */
  export type employee$checkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    where?: checkoutWhereInput
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    cursor?: checkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckoutScalarFieldEnum | CheckoutScalarFieldEnum[]
  }


  /**
   * employee.student
   */
  export type employee$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    where?: studentWhereInput
  }


  /**
   * employee without action
   */
  export type employeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
  }



  /**
   * Model item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    itemID: number | null
    value: number | null
    stock: number | null
  }

  export type ItemSumAggregateOutputType = {
    itemID: number | null
    value: number | null
    stock: number | null
  }

  export type ItemMinAggregateOutputType = {
    itemID: number | null
    name: string | null
    value: number | null
    classification: string | null
    imgURL: string | null
    stock: number | null
    expirationDate: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    itemID: number | null
    name: string | null
    value: number | null
    classification: string | null
    imgURL: string | null
    stock: number | null
    expirationDate: Date | null
  }

  export type ItemCountAggregateOutputType = {
    itemID: number
    name: number
    value: number
    classification: number
    imgURL: number
    stock: number
    expirationDate: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    itemID?: true
    value?: true
    stock?: true
  }

  export type ItemSumAggregateInputType = {
    itemID?: true
    value?: true
    stock?: true
  }

  export type ItemMinAggregateInputType = {
    itemID?: true
    name?: true
    value?: true
    classification?: true
    imgURL?: true
    stock?: true
    expirationDate?: true
  }

  export type ItemMaxAggregateInputType = {
    itemID?: true
    name?: true
    value?: true
    classification?: true
    imgURL?: true
    stock?: true
    expirationDate?: true
  }

  export type ItemCountAggregateInputType = {
    itemID?: true
    name?: true
    value?: true
    classification?: true
    imgURL?: true
    stock?: true
    expirationDate?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which item to aggregate.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemOrderByWithRelationInput | itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type itemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: itemWhereInput
    orderBy?: itemOrderByWithAggregationInput | itemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: itemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    itemID: number
    name: string | null
    value: number | null
    classification: string | null
    imgURL: string | null
    stock: number | null
    expirationDate: Date | null
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends itemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type itemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    itemID?: boolean
    name?: boolean
    value?: boolean
    classification?: boolean
    imgURL?: boolean
    stock?: boolean
    expirationDate?: boolean
    cartItems?: boolean | item$cartItemsArgs<ExtArgs>
    checkoutItems?: boolean | item$checkoutItemsArgs<ExtArgs>
    categories?: boolean | item$categoriesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type itemSelectScalar = {
    itemID?: boolean
    name?: boolean
    value?: boolean
    classification?: boolean
    imgURL?: boolean
    stock?: boolean
    expirationDate?: boolean
  }

  export type itemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartItems?: boolean | item$cartItemsArgs<ExtArgs>
    checkoutItems?: boolean | item$checkoutItemsArgs<ExtArgs>
    categories?: boolean | item$categoriesArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $itemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "item"
    objects: {
      cartItems: Prisma.$cartItemsPayload<ExtArgs>[]
      checkoutItems: Prisma.$checkoutItemsPayload<ExtArgs>[]
      categories: Prisma.$categoriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      itemID: number
      name: string | null
      value: number | null
      classification: string | null
      imgURL: string | null
      stock: number | null
      expirationDate: Date | null
    }, ExtArgs["result"]["item"]>
    composites: {}
  }


  type itemGetPayload<S extends boolean | null | undefined | itemDefaultArgs> = $Result.GetResult<Prisma.$itemPayload, S>

  type itemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<itemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface itemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['item'], meta: { name: 'item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {itemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, itemFindUniqueArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {itemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends itemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, itemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, itemFindFirstArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends itemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, itemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `itemID`
     * const itemWithItemIDOnly = await prisma.item.findMany({ select: { itemID: true } })
     * 
    **/
    findMany<T extends itemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Item.
     * @param {itemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends itemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, itemCreateArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Items.
     *     @param {itemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {itemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends itemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, itemDeleteArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Item.
     * @param {itemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, itemUpdateArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {itemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, itemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, itemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {itemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends itemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, itemUpsertArgs<ExtArgs>>
    ): Prisma__itemClient<$Result.GetResult<Prisma.$itemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemCountArgs>(
      args?: Subset<T, itemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends itemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: itemGroupByArgs['orderBy'] }
        : { orderBy?: itemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, itemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the item model
   */
  readonly fields: itemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__itemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cartItems<T extends item$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, item$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    checkoutItems<T extends item$checkoutItemsArgs<ExtArgs> = {}>(args?: Subset<T, item$checkoutItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    categories<T extends item$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, item$categoriesArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the item model
   */ 
  interface itemFieldRefs {
    readonly itemID: FieldRef<"item", 'Int'>
    readonly name: FieldRef<"item", 'String'>
    readonly value: FieldRef<"item", 'Int'>
    readonly classification: FieldRef<"item", 'String'>
    readonly imgURL: FieldRef<"item", 'String'>
    readonly stock: FieldRef<"item", 'Int'>
    readonly expirationDate: FieldRef<"item", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * item findUnique
   */
  export type itemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter, which item to fetch.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item findUniqueOrThrow
   */
  export type itemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter, which item to fetch.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item findFirst
   */
  export type itemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter, which item to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemOrderByWithRelationInput | itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * item findFirstOrThrow
   */
  export type itemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter, which item to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemOrderByWithRelationInput | itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * item findMany
   */
  export type itemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter, which items to fetch.
     */
    where?: itemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     */
    orderBy?: itemOrderByWithRelationInput | itemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     */
    cursor?: itemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }


  /**
   * item create
   */
  export type itemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * The data needed to create a item.
     */
    data: XOR<itemCreateInput, itemUncheckedCreateInput>
  }


  /**
   * item createMany
   */
  export type itemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many items.
     */
    data: itemCreateManyInput | itemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * item update
   */
  export type itemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * The data needed to update a item.
     */
    data: XOR<itemUpdateInput, itemUncheckedUpdateInput>
    /**
     * Choose, which item to update.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item updateMany
   */
  export type itemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update items.
     */
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyInput>
    /**
     * Filter which items to update
     */
    where?: itemWhereInput
  }


  /**
   * item upsert
   */
  export type itemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * The filter to search for the item to update in case it exists.
     */
    where: itemWhereUniqueInput
    /**
     * In case the item found by the `where` argument doesn't exist, create a new item with this data.
     */
    create: XOR<itemCreateInput, itemUncheckedCreateInput>
    /**
     * In case the item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<itemUpdateInput, itemUncheckedUpdateInput>
  }


  /**
   * item delete
   */
  export type itemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
    /**
     * Filter which item to delete.
     */
    where: itemWhereUniqueInput
  }


  /**
   * item deleteMany
   */
  export type itemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which items to delete
     */
    where?: itemWhereInput
  }


  /**
   * item.cartItems
   */
  export type item$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    where?: cartItemsWhereInput
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    cursor?: cartItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemsScalarFieldEnum | CartItemsScalarFieldEnum[]
  }


  /**
   * item.checkoutItems
   */
  export type item$checkoutItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkoutItems
     */
    select?: checkoutItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutItemsInclude<ExtArgs> | null
    where?: checkoutItemsWhereInput
    orderBy?: checkoutItemsOrderByWithRelationInput | checkoutItemsOrderByWithRelationInput[]
    cursor?: checkoutItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckoutItemsScalarFieldEnum | CheckoutItemsScalarFieldEnum[]
  }


  /**
   * item.categories
   */
  export type item$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    where?: categoriesWhereInput
  }


  /**
   * item without action
   */
  export type itemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item
     */
    select?: itemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: itemInclude<ExtArgs> | null
  }



  /**
   * Model student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    numVisits: number | null
    cartID: number | null
    totalValue: number | null
  }

  export type StudentSumAggregateOutputType = {
    numVisits: number | null
    cartID: number | null
    totalValue: number | null
  }

  export type StudentMinAggregateOutputType = {
    ID: string | null
    fname: string | null
    surname: string | null
    grade: string | null
    numVisits: number | null
    current_status: $Enums.status | null
    major: string | null
    gender: string | null
    lastLogin: Date | null
    cartID: number | null
    totalValue: number | null
  }

  export type StudentMaxAggregateOutputType = {
    ID: string | null
    fname: string | null
    surname: string | null
    grade: string | null
    numVisits: number | null
    current_status: $Enums.status | null
    major: string | null
    gender: string | null
    lastLogin: Date | null
    cartID: number | null
    totalValue: number | null
  }

  export type StudentCountAggregateOutputType = {
    ID: number
    fname: number
    surname: number
    grade: number
    numVisits: number
    current_status: number
    major: number
    gender: number
    lastLogin: number
    cartID: number
    totalValue: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    numVisits?: true
    cartID?: true
    totalValue?: true
  }

  export type StudentSumAggregateInputType = {
    numVisits?: true
    cartID?: true
    totalValue?: true
  }

  export type StudentMinAggregateInputType = {
    ID?: true
    fname?: true
    surname?: true
    grade?: true
    numVisits?: true
    current_status?: true
    major?: true
    gender?: true
    lastLogin?: true
    cartID?: true
    totalValue?: true
  }

  export type StudentMaxAggregateInputType = {
    ID?: true
    fname?: true
    surname?: true
    grade?: true
    numVisits?: true
    current_status?: true
    major?: true
    gender?: true
    lastLogin?: true
    cartID?: true
    totalValue?: true
  }

  export type StudentCountAggregateInputType = {
    ID?: true
    fname?: true
    surname?: true
    grade?: true
    numVisits?: true
    current_status?: true
    major?: true
    gender?: true
    lastLogin?: true
    cartID?: true
    totalValue?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student to aggregate.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type studentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentWhereInput
    orderBy?: studentOrderByWithAggregationInput | studentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: studentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    ID: string
    fname: string | null
    surname: string | null
    grade: string | null
    numVisits: number | null
    current_status: $Enums.status | null
    major: string | null
    gender: string | null
    lastLogin: Date | null
    cartID: number | null
    totalValue: number | null
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends studentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type studentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    fname?: boolean
    surname?: boolean
    grade?: boolean
    numVisits?: boolean
    current_status?: boolean
    major?: boolean
    gender?: boolean
    lastLogin?: boolean
    cartID?: boolean
    totalValue?: boolean
    cartItems?: boolean | student$cartItemsArgs<ExtArgs>
    checkout?: boolean | student$checkoutArgs<ExtArgs>
    employee?: boolean | student$employeeArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type studentSelectScalar = {
    ID?: boolean
    fname?: boolean
    surname?: boolean
    grade?: boolean
    numVisits?: boolean
    current_status?: boolean
    major?: boolean
    gender?: boolean
    lastLogin?: boolean
    cartID?: boolean
    totalValue?: boolean
  }

  export type studentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartItems?: boolean | student$cartItemsArgs<ExtArgs>
    checkout?: boolean | student$checkoutArgs<ExtArgs>
    employee?: boolean | student$employeeArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $studentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "student"
    objects: {
      cartItems: Prisma.$cartItemsPayload<ExtArgs>[]
      checkout: Prisma.$checkoutPayload<ExtArgs>[]
      employee: Prisma.$employeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: string
      fname: string | null
      surname: string | null
      grade: string | null
      numVisits: number | null
      current_status: $Enums.status | null
      major: string | null
      gender: string | null
      lastLogin: Date | null
      cartID: number | null
      totalValue: number | null
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type studentGetPayload<S extends boolean | null | undefined | studentDefaultArgs> = $Result.GetResult<Prisma.$studentPayload, S>

  type studentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<studentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface studentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['student'], meta: { name: 'student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {studentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, studentFindUniqueArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {studentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindFirstArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const studentWithIDOnly = await prisma.student.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends studentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {studentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends studentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, studentCreateArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {studentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {studentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends studentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, studentDeleteArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {studentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpdateArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {studentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {studentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends studentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpsertArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentCountArgs>(
      args?: Subset<T, studentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studentGroupByArgs['orderBy'] }
        : { orderBy?: studentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the student model
   */
  readonly fields: studentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cartItems<T extends student$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, student$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cartItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    checkout<T extends student$checkoutArgs<ExtArgs> = {}>(args?: Subset<T, student$checkoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$checkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    employee<T extends student$employeeArgs<ExtArgs> = {}>(args?: Subset<T, student$employeeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the student model
   */ 
  interface studentFieldRefs {
    readonly ID: FieldRef<"student", 'String'>
    readonly fname: FieldRef<"student", 'String'>
    readonly surname: FieldRef<"student", 'String'>
    readonly grade: FieldRef<"student", 'String'>
    readonly numVisits: FieldRef<"student", 'Int'>
    readonly current_status: FieldRef<"student", 'status'>
    readonly major: FieldRef<"student", 'String'>
    readonly gender: FieldRef<"student", 'String'>
    readonly lastLogin: FieldRef<"student", 'DateTime'>
    readonly cartID: FieldRef<"student", 'Int'>
    readonly totalValue: FieldRef<"student", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * student findUnique
   */
  export type studentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student findUniqueOrThrow
   */
  export type studentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student findFirst
   */
  export type studentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student findFirstOrThrow
   */
  export type studentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student findMany
   */
  export type studentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student create
   */
  export type studentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The data needed to create a student.
     */
    data: XOR<studentCreateInput, studentUncheckedCreateInput>
  }


  /**
   * student createMany
   */
  export type studentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many students.
     */
    data: studentCreateManyInput | studentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * student update
   */
  export type studentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The data needed to update a student.
     */
    data: XOR<studentUpdateInput, studentUncheckedUpdateInput>
    /**
     * Choose, which student to update.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student updateMany
   */
  export type studentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update students.
     */
    data: XOR<studentUpdateManyMutationInput, studentUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     */
    where?: studentWhereInput
  }


  /**
   * student upsert
   */
  export type studentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The filter to search for the student to update in case it exists.
     */
    where: studentWhereUniqueInput
    /**
     * In case the student found by the `where` argument doesn't exist, create a new student with this data.
     */
    create: XOR<studentCreateInput, studentUncheckedCreateInput>
    /**
     * In case the student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studentUpdateInput, studentUncheckedUpdateInput>
  }


  /**
   * student delete
   */
  export type studentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter which student to delete.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student deleteMany
   */
  export type studentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to delete
     */
    where?: studentWhereInput
  }


  /**
   * student.cartItems
   */
  export type student$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cartItems
     */
    select?: cartItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartItemsInclude<ExtArgs> | null
    where?: cartItemsWhereInput
    orderBy?: cartItemsOrderByWithRelationInput | cartItemsOrderByWithRelationInput[]
    cursor?: cartItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemsScalarFieldEnum | CartItemsScalarFieldEnum[]
  }


  /**
   * student.checkout
   */
  export type student$checkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the checkout
     */
    select?: checkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: checkoutInclude<ExtArgs> | null
    where?: checkoutWhereInput
    orderBy?: checkoutOrderByWithRelationInput | checkoutOrderByWithRelationInput[]
    cursor?: checkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckoutScalarFieldEnum | CheckoutScalarFieldEnum[]
  }


  /**
   * student.employee
   */
  export type student$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employee
     */
    select?: employeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: employeeInclude<ExtArgs> | null
    where?: employeeWhereInput
    orderBy?: employeeOrderByWithRelationInput | employeeOrderByWithRelationInput[]
    cursor?: employeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * student without action
   */
  export type studentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CartItemsScalarFieldEnum: {
    cartID: 'cartID',
    itemID: 'itemID',
    quantity: 'quantity',
    value: 'value'
  };

  export type CartItemsScalarFieldEnum = (typeof CartItemsScalarFieldEnum)[keyof typeof CartItemsScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    classification: 'classification',
    items: 'items'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const CheckoutScalarFieldEnum: {
    transactionID: 'transactionID',
    workerID: 'workerID',
    customerID: 'customerID',
    checkoutDate: 'checkoutDate'
  };

  export type CheckoutScalarFieldEnum = (typeof CheckoutScalarFieldEnum)[keyof typeof CheckoutScalarFieldEnum]


  export const CheckoutItemsScalarFieldEnum: {
    transactionID: 'transactionID',
    itemID: 'itemID',
    quantity: 'quantity',
    value: 'value'
  };

  export type CheckoutItemsScalarFieldEnum = (typeof CheckoutItemsScalarFieldEnum)[keyof typeof CheckoutItemsScalarFieldEnum]


  export const DonorsScalarFieldEnum: {
    ID: 'ID',
    affiliation: 'affiliation',
    donationCount: 'donationCount',
    lastDonation: 'lastDonation',
    donationDescript: 'donationDescript',
    estDonValue: 'estDonValue'
  };

  export type DonorsScalarFieldEnum = (typeof DonorsScalarFieldEnum)[keyof typeof DonorsScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    ID: 'ID',
    studentID: 'studentID',
    hoursWorked: 'hoursWorked',
    isPaid: 'isPaid',
    salary: 'salary'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    itemID: 'itemID',
    name: 'name',
    value: 'value',
    classification: 'classification',
    imgURL: 'imgURL',
    stock: 'stock',
    expirationDate: 'expirationDate'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    ID: 'ID',
    fname: 'fname',
    surname: 'surname',
    grade: 'grade',
    numVisits: 'numVisits',
    current_status: 'current_status',
    major: 'major',
    gender: 'gender',
    lastLogin: 'lastLogin',
    cartID: 'cartID',
    totalValue: 'totalValue'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'status'
   */
  export type EnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status'>
    


  /**
   * Reference to a field of type 'status[]'
   */
  export type ListEnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type cartItemsWhereInput = {
    AND?: cartItemsWhereInput | cartItemsWhereInput[]
    OR?: cartItemsWhereInput[]
    NOT?: cartItemsWhereInput | cartItemsWhereInput[]
    cartID?: IntFilter<"cartItems"> | number
    itemID?: IntFilter<"cartItems"> | number
    quantity?: IntNullableFilter<"cartItems"> | number | null
    value?: IntNullableFilter<"cartItems"> | number | null
    student?: XOR<StudentRelationFilter, studentWhereInput>
    item?: XOR<ItemRelationFilter, itemWhereInput>
  }

  export type cartItemsOrderByWithRelationInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    student?: studentOrderByWithRelationInput
    item?: itemOrderByWithRelationInput
  }

  export type cartItemsWhereUniqueInput = Prisma.AtLeast<{
    cartID_itemID?: cartItemsCartIDItemIDCompoundUniqueInput
    AND?: cartItemsWhereInput | cartItemsWhereInput[]
    OR?: cartItemsWhereInput[]
    NOT?: cartItemsWhereInput | cartItemsWhereInput[]
    cartID?: IntFilter<"cartItems"> | number
    itemID?: IntFilter<"cartItems"> | number
    quantity?: IntNullableFilter<"cartItems"> | number | null
    value?: IntNullableFilter<"cartItems"> | number | null
    student?: XOR<StudentRelationFilter, studentWhereInput>
    item?: XOR<ItemRelationFilter, itemWhereInput>
  }, "cartID_itemID">

  export type cartItemsOrderByWithAggregationInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    _count?: cartItemsCountOrderByAggregateInput
    _avg?: cartItemsAvgOrderByAggregateInput
    _max?: cartItemsMaxOrderByAggregateInput
    _min?: cartItemsMinOrderByAggregateInput
    _sum?: cartItemsSumOrderByAggregateInput
  }

  export type cartItemsScalarWhereWithAggregatesInput = {
    AND?: cartItemsScalarWhereWithAggregatesInput | cartItemsScalarWhereWithAggregatesInput[]
    OR?: cartItemsScalarWhereWithAggregatesInput[]
    NOT?: cartItemsScalarWhereWithAggregatesInput | cartItemsScalarWhereWithAggregatesInput[]
    cartID?: IntWithAggregatesFilter<"cartItems"> | number
    itemID?: IntWithAggregatesFilter<"cartItems"> | number
    quantity?: IntNullableWithAggregatesFilter<"cartItems"> | number | null
    value?: IntNullableWithAggregatesFilter<"cartItems"> | number | null
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    classification?: StringFilter<"categories"> | string
    items?: IntNullableFilter<"categories"> | number | null
    item?: ItemListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    classification?: SortOrder
    items?: SortOrderInput | SortOrder
    item?: itemOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    classification?: string
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    items?: IntNullableFilter<"categories"> | number | null
    item?: ItemListRelationFilter
  }, "classification">

  export type categoriesOrderByWithAggregationInput = {
    classification?: SortOrder
    items?: SortOrderInput | SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    classification?: StringWithAggregatesFilter<"categories"> | string
    items?: IntNullableWithAggregatesFilter<"categories"> | number | null
  }

  export type checkoutWhereInput = {
    AND?: checkoutWhereInput | checkoutWhereInput[]
    OR?: checkoutWhereInput[]
    NOT?: checkoutWhereInput | checkoutWhereInput[]
    transactionID?: IntFilter<"checkout"> | number
    workerID?: IntNullableFilter<"checkout"> | number | null
    customerID?: StringNullableFilter<"checkout"> | string | null
    checkoutDate?: DateTimeNullableFilter<"checkout"> | Date | string | null
    student?: XOR<StudentNullableRelationFilter, studentWhereInput> | null
    employee?: XOR<EmployeeNullableRelationFilter, employeeWhereInput> | null
    checkoutItems?: CheckoutItemsListRelationFilter
  }

  export type checkoutOrderByWithRelationInput = {
    transactionID?: SortOrder
    workerID?: SortOrderInput | SortOrder
    customerID?: SortOrderInput | SortOrder
    checkoutDate?: SortOrderInput | SortOrder
    student?: studentOrderByWithRelationInput
    employee?: employeeOrderByWithRelationInput
    checkoutItems?: checkoutItemsOrderByRelationAggregateInput
  }

  export type checkoutWhereUniqueInput = Prisma.AtLeast<{
    transactionID?: number
    AND?: checkoutWhereInput | checkoutWhereInput[]
    OR?: checkoutWhereInput[]
    NOT?: checkoutWhereInput | checkoutWhereInput[]
    workerID?: IntNullableFilter<"checkout"> | number | null
    customerID?: StringNullableFilter<"checkout"> | string | null
    checkoutDate?: DateTimeNullableFilter<"checkout"> | Date | string | null
    student?: XOR<StudentNullableRelationFilter, studentWhereInput> | null
    employee?: XOR<EmployeeNullableRelationFilter, employeeWhereInput> | null
    checkoutItems?: CheckoutItemsListRelationFilter
  }, "transactionID">

  export type checkoutOrderByWithAggregationInput = {
    transactionID?: SortOrder
    workerID?: SortOrderInput | SortOrder
    customerID?: SortOrderInput | SortOrder
    checkoutDate?: SortOrderInput | SortOrder
    _count?: checkoutCountOrderByAggregateInput
    _avg?: checkoutAvgOrderByAggregateInput
    _max?: checkoutMaxOrderByAggregateInput
    _min?: checkoutMinOrderByAggregateInput
    _sum?: checkoutSumOrderByAggregateInput
  }

  export type checkoutScalarWhereWithAggregatesInput = {
    AND?: checkoutScalarWhereWithAggregatesInput | checkoutScalarWhereWithAggregatesInput[]
    OR?: checkoutScalarWhereWithAggregatesInput[]
    NOT?: checkoutScalarWhereWithAggregatesInput | checkoutScalarWhereWithAggregatesInput[]
    transactionID?: IntWithAggregatesFilter<"checkout"> | number
    workerID?: IntNullableWithAggregatesFilter<"checkout"> | number | null
    customerID?: StringNullableWithAggregatesFilter<"checkout"> | string | null
    checkoutDate?: DateTimeNullableWithAggregatesFilter<"checkout"> | Date | string | null
  }

  export type checkoutItemsWhereInput = {
    AND?: checkoutItemsWhereInput | checkoutItemsWhereInput[]
    OR?: checkoutItemsWhereInput[]
    NOT?: checkoutItemsWhereInput | checkoutItemsWhereInput[]
    transactionID?: IntFilter<"checkoutItems"> | number
    itemID?: IntFilter<"checkoutItems"> | number
    quantity?: IntNullableFilter<"checkoutItems"> | number | null
    value?: IntNullableFilter<"checkoutItems"> | number | null
    item?: XOR<ItemRelationFilter, itemWhereInput>
    checkout?: XOR<CheckoutRelationFilter, checkoutWhereInput>
  }

  export type checkoutItemsOrderByWithRelationInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    item?: itemOrderByWithRelationInput
    checkout?: checkoutOrderByWithRelationInput
  }

  export type checkoutItemsWhereUniqueInput = Prisma.AtLeast<{
    transactionID_itemID?: checkoutItemsTransactionIDItemIDCompoundUniqueInput
    AND?: checkoutItemsWhereInput | checkoutItemsWhereInput[]
    OR?: checkoutItemsWhereInput[]
    NOT?: checkoutItemsWhereInput | checkoutItemsWhereInput[]
    transactionID?: IntFilter<"checkoutItems"> | number
    itemID?: IntFilter<"checkoutItems"> | number
    quantity?: IntNullableFilter<"checkoutItems"> | number | null
    value?: IntNullableFilter<"checkoutItems"> | number | null
    item?: XOR<ItemRelationFilter, itemWhereInput>
    checkout?: XOR<CheckoutRelationFilter, checkoutWhereInput>
  }, "transactionID_itemID">

  export type checkoutItemsOrderByWithAggregationInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    _count?: checkoutItemsCountOrderByAggregateInput
    _avg?: checkoutItemsAvgOrderByAggregateInput
    _max?: checkoutItemsMaxOrderByAggregateInput
    _min?: checkoutItemsMinOrderByAggregateInput
    _sum?: checkoutItemsSumOrderByAggregateInput
  }

  export type checkoutItemsScalarWhereWithAggregatesInput = {
    AND?: checkoutItemsScalarWhereWithAggregatesInput | checkoutItemsScalarWhereWithAggregatesInput[]
    OR?: checkoutItemsScalarWhereWithAggregatesInput[]
    NOT?: checkoutItemsScalarWhereWithAggregatesInput | checkoutItemsScalarWhereWithAggregatesInput[]
    transactionID?: IntWithAggregatesFilter<"checkoutItems"> | number
    itemID?: IntWithAggregatesFilter<"checkoutItems"> | number
    quantity?: IntNullableWithAggregatesFilter<"checkoutItems"> | number | null
    value?: IntNullableWithAggregatesFilter<"checkoutItems"> | number | null
  }

  export type donorsWhereInput = {
    AND?: donorsWhereInput | donorsWhereInput[]
    OR?: donorsWhereInput[]
    NOT?: donorsWhereInput | donorsWhereInput[]
    ID?: IntFilter<"donors"> | number
    affiliation?: StringNullableFilter<"donors"> | string | null
    donationCount?: IntNullableFilter<"donors"> | number | null
    lastDonation?: DateTimeNullableFilter<"donors"> | Date | string | null
    donationDescript?: StringNullableFilter<"donors"> | string | null
    estDonValue?: DecimalNullableFilter<"donors"> | Decimal | DecimalJsLike | number | string | null
  }

  export type donorsOrderByWithRelationInput = {
    ID?: SortOrder
    affiliation?: SortOrderInput | SortOrder
    donationCount?: SortOrderInput | SortOrder
    lastDonation?: SortOrderInput | SortOrder
    donationDescript?: SortOrderInput | SortOrder
    estDonValue?: SortOrderInput | SortOrder
  }

  export type donorsWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: donorsWhereInput | donorsWhereInput[]
    OR?: donorsWhereInput[]
    NOT?: donorsWhereInput | donorsWhereInput[]
    affiliation?: StringNullableFilter<"donors"> | string | null
    donationCount?: IntNullableFilter<"donors"> | number | null
    lastDonation?: DateTimeNullableFilter<"donors"> | Date | string | null
    donationDescript?: StringNullableFilter<"donors"> | string | null
    estDonValue?: DecimalNullableFilter<"donors"> | Decimal | DecimalJsLike | number | string | null
  }, "ID">

  export type donorsOrderByWithAggregationInput = {
    ID?: SortOrder
    affiliation?: SortOrderInput | SortOrder
    donationCount?: SortOrderInput | SortOrder
    lastDonation?: SortOrderInput | SortOrder
    donationDescript?: SortOrderInput | SortOrder
    estDonValue?: SortOrderInput | SortOrder
    _count?: donorsCountOrderByAggregateInput
    _avg?: donorsAvgOrderByAggregateInput
    _max?: donorsMaxOrderByAggregateInput
    _min?: donorsMinOrderByAggregateInput
    _sum?: donorsSumOrderByAggregateInput
  }

  export type donorsScalarWhereWithAggregatesInput = {
    AND?: donorsScalarWhereWithAggregatesInput | donorsScalarWhereWithAggregatesInput[]
    OR?: donorsScalarWhereWithAggregatesInput[]
    NOT?: donorsScalarWhereWithAggregatesInput | donorsScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"donors"> | number
    affiliation?: StringNullableWithAggregatesFilter<"donors"> | string | null
    donationCount?: IntNullableWithAggregatesFilter<"donors"> | number | null
    lastDonation?: DateTimeNullableWithAggregatesFilter<"donors"> | Date | string | null
    donationDescript?: StringNullableWithAggregatesFilter<"donors"> | string | null
    estDonValue?: DecimalNullableWithAggregatesFilter<"donors"> | Decimal | DecimalJsLike | number | string | null
  }

  export type employeeWhereInput = {
    AND?: employeeWhereInput | employeeWhereInput[]
    OR?: employeeWhereInput[]
    NOT?: employeeWhereInput | employeeWhereInput[]
    ID?: IntFilter<"employee"> | number
    studentID?: StringNullableFilter<"employee"> | string | null
    hoursWorked?: IntNullableFilter<"employee"> | number | null
    isPaid?: BoolNullableFilter<"employee"> | boolean | null
    salary?: DecimalNullableFilter<"employee"> | Decimal | DecimalJsLike | number | string | null
    checkout?: CheckoutListRelationFilter
    student?: XOR<StudentNullableRelationFilter, studentWhereInput> | null
  }

  export type employeeOrderByWithRelationInput = {
    ID?: SortOrder
    studentID?: SortOrderInput | SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    isPaid?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    checkout?: checkoutOrderByRelationAggregateInput
    student?: studentOrderByWithRelationInput
  }

  export type employeeWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: employeeWhereInput | employeeWhereInput[]
    OR?: employeeWhereInput[]
    NOT?: employeeWhereInput | employeeWhereInput[]
    studentID?: StringNullableFilter<"employee"> | string | null
    hoursWorked?: IntNullableFilter<"employee"> | number | null
    isPaid?: BoolNullableFilter<"employee"> | boolean | null
    salary?: DecimalNullableFilter<"employee"> | Decimal | DecimalJsLike | number | string | null
    checkout?: CheckoutListRelationFilter
    student?: XOR<StudentNullableRelationFilter, studentWhereInput> | null
  }, "ID">

  export type employeeOrderByWithAggregationInput = {
    ID?: SortOrder
    studentID?: SortOrderInput | SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    isPaid?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    _count?: employeeCountOrderByAggregateInput
    _avg?: employeeAvgOrderByAggregateInput
    _max?: employeeMaxOrderByAggregateInput
    _min?: employeeMinOrderByAggregateInput
    _sum?: employeeSumOrderByAggregateInput
  }

  export type employeeScalarWhereWithAggregatesInput = {
    AND?: employeeScalarWhereWithAggregatesInput | employeeScalarWhereWithAggregatesInput[]
    OR?: employeeScalarWhereWithAggregatesInput[]
    NOT?: employeeScalarWhereWithAggregatesInput | employeeScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"employee"> | number
    studentID?: StringNullableWithAggregatesFilter<"employee"> | string | null
    hoursWorked?: IntNullableWithAggregatesFilter<"employee"> | number | null
    isPaid?: BoolNullableWithAggregatesFilter<"employee"> | boolean | null
    salary?: DecimalNullableWithAggregatesFilter<"employee"> | Decimal | DecimalJsLike | number | string | null
  }

  export type itemWhereInput = {
    AND?: itemWhereInput | itemWhereInput[]
    OR?: itemWhereInput[]
    NOT?: itemWhereInput | itemWhereInput[]
    itemID?: IntFilter<"item"> | number
    name?: StringNullableFilter<"item"> | string | null
    value?: IntNullableFilter<"item"> | number | null
    classification?: StringNullableFilter<"item"> | string | null
    imgURL?: StringNullableFilter<"item"> | string | null
    stock?: IntNullableFilter<"item"> | number | null
    expirationDate?: DateTimeNullableFilter<"item"> | Date | string | null
    cartItems?: CartItemsListRelationFilter
    checkoutItems?: CheckoutItemsListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }

  export type itemOrderByWithRelationInput = {
    itemID?: SortOrder
    name?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    imgURL?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    expirationDate?: SortOrderInput | SortOrder
    cartItems?: cartItemsOrderByRelationAggregateInput
    checkoutItems?: checkoutItemsOrderByRelationAggregateInput
    categories?: categoriesOrderByWithRelationInput
  }

  export type itemWhereUniqueInput = Prisma.AtLeast<{
    itemID?: number
    AND?: itemWhereInput | itemWhereInput[]
    OR?: itemWhereInput[]
    NOT?: itemWhereInput | itemWhereInput[]
    name?: StringNullableFilter<"item"> | string | null
    value?: IntNullableFilter<"item"> | number | null
    classification?: StringNullableFilter<"item"> | string | null
    imgURL?: StringNullableFilter<"item"> | string | null
    stock?: IntNullableFilter<"item"> | number | null
    expirationDate?: DateTimeNullableFilter<"item"> | Date | string | null
    cartItems?: CartItemsListRelationFilter
    checkoutItems?: CheckoutItemsListRelationFilter
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }, "itemID">

  export type itemOrderByWithAggregationInput = {
    itemID?: SortOrder
    name?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    imgURL?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    expirationDate?: SortOrderInput | SortOrder
    _count?: itemCountOrderByAggregateInput
    _avg?: itemAvgOrderByAggregateInput
    _max?: itemMaxOrderByAggregateInput
    _min?: itemMinOrderByAggregateInput
    _sum?: itemSumOrderByAggregateInput
  }

  export type itemScalarWhereWithAggregatesInput = {
    AND?: itemScalarWhereWithAggregatesInput | itemScalarWhereWithAggregatesInput[]
    OR?: itemScalarWhereWithAggregatesInput[]
    NOT?: itemScalarWhereWithAggregatesInput | itemScalarWhereWithAggregatesInput[]
    itemID?: IntWithAggregatesFilter<"item"> | number
    name?: StringNullableWithAggregatesFilter<"item"> | string | null
    value?: IntNullableWithAggregatesFilter<"item"> | number | null
    classification?: StringNullableWithAggregatesFilter<"item"> | string | null
    imgURL?: StringNullableWithAggregatesFilter<"item"> | string | null
    stock?: IntNullableWithAggregatesFilter<"item"> | number | null
    expirationDate?: DateTimeNullableWithAggregatesFilter<"item"> | Date | string | null
  }

  export type studentWhereInput = {
    AND?: studentWhereInput | studentWhereInput[]
    OR?: studentWhereInput[]
    NOT?: studentWhereInput | studentWhereInput[]
    ID?: StringFilter<"student"> | string
    fname?: StringNullableFilter<"student"> | string | null
    surname?: StringNullableFilter<"student"> | string | null
    grade?: StringNullableFilter<"student"> | string | null
    numVisits?: IntNullableFilter<"student"> | number | null
    current_status?: EnumstatusNullableFilter<"student"> | $Enums.status | null
    major?: StringNullableFilter<"student"> | string | null
    gender?: StringNullableFilter<"student"> | string | null
    lastLogin?: DateTimeNullableFilter<"student"> | Date | string | null
    cartID?: IntNullableFilter<"student"> | number | null
    totalValue?: IntNullableFilter<"student"> | number | null
    cartItems?: CartItemsListRelationFilter
    checkout?: CheckoutListRelationFilter
    employee?: EmployeeListRelationFilter
  }

  export type studentOrderByWithRelationInput = {
    ID?: SortOrder
    fname?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    numVisits?: SortOrderInput | SortOrder
    current_status?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    cartID?: SortOrderInput | SortOrder
    totalValue?: SortOrderInput | SortOrder
    cartItems?: cartItemsOrderByRelationAggregateInput
    checkout?: checkoutOrderByRelationAggregateInput
    employee?: employeeOrderByRelationAggregateInput
  }

  export type studentWhereUniqueInput = Prisma.AtLeast<{
    ID?: string
    cartID?: number
    AND?: studentWhereInput | studentWhereInput[]
    OR?: studentWhereInput[]
    NOT?: studentWhereInput | studentWhereInput[]
    fname?: StringNullableFilter<"student"> | string | null
    surname?: StringNullableFilter<"student"> | string | null
    grade?: StringNullableFilter<"student"> | string | null
    numVisits?: IntNullableFilter<"student"> | number | null
    current_status?: EnumstatusNullableFilter<"student"> | $Enums.status | null
    major?: StringNullableFilter<"student"> | string | null
    gender?: StringNullableFilter<"student"> | string | null
    lastLogin?: DateTimeNullableFilter<"student"> | Date | string | null
    totalValue?: IntNullableFilter<"student"> | number | null
    cartItems?: CartItemsListRelationFilter
    checkout?: CheckoutListRelationFilter
    employee?: EmployeeListRelationFilter
  }, "ID" | "cartID">

  export type studentOrderByWithAggregationInput = {
    ID?: SortOrder
    fname?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    numVisits?: SortOrderInput | SortOrder
    current_status?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    cartID?: SortOrderInput | SortOrder
    totalValue?: SortOrderInput | SortOrder
    _count?: studentCountOrderByAggregateInput
    _avg?: studentAvgOrderByAggregateInput
    _max?: studentMaxOrderByAggregateInput
    _min?: studentMinOrderByAggregateInput
    _sum?: studentSumOrderByAggregateInput
  }

  export type studentScalarWhereWithAggregatesInput = {
    AND?: studentScalarWhereWithAggregatesInput | studentScalarWhereWithAggregatesInput[]
    OR?: studentScalarWhereWithAggregatesInput[]
    NOT?: studentScalarWhereWithAggregatesInput | studentScalarWhereWithAggregatesInput[]
    ID?: StringWithAggregatesFilter<"student"> | string
    fname?: StringNullableWithAggregatesFilter<"student"> | string | null
    surname?: StringNullableWithAggregatesFilter<"student"> | string | null
    grade?: StringNullableWithAggregatesFilter<"student"> | string | null
    numVisits?: IntNullableWithAggregatesFilter<"student"> | number | null
    current_status?: EnumstatusNullableWithAggregatesFilter<"student"> | $Enums.status | null
    major?: StringNullableWithAggregatesFilter<"student"> | string | null
    gender?: StringNullableWithAggregatesFilter<"student"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"student"> | Date | string | null
    cartID?: IntNullableWithAggregatesFilter<"student"> | number | null
    totalValue?: IntNullableWithAggregatesFilter<"student"> | number | null
  }

  export type cartItemsCreateInput = {
    quantity?: number | null
    value?: number | null
    student: studentCreateNestedOneWithoutCartItemsInput
    item: itemCreateNestedOneWithoutCartItemsInput
  }

  export type cartItemsUncheckedCreateInput = {
    cartID: number
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type cartItemsUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    student?: studentUpdateOneRequiredWithoutCartItemsNestedInput
    item?: itemUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type cartItemsUncheckedUpdateInput = {
    cartID?: IntFieldUpdateOperationsInput | number
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsCreateManyInput = {
    cartID: number
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type cartItemsUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsUncheckedUpdateManyInput = {
    cartID?: IntFieldUpdateOperationsInput | number
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoriesCreateInput = {
    classification: string
    items?: number | null
    item?: itemCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    classification: string
    items?: number | null
    item?: itemUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
    item?: itemUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
    item?: itemUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesCreateManyInput = {
    classification: string
    items?: number | null
  }

  export type categoriesUpdateManyMutationInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoriesUncheckedUpdateManyInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutCreateInput = {
    transactionID: number
    checkoutDate?: Date | string | null
    student?: studentCreateNestedOneWithoutCheckoutInput
    employee?: employeeCreateNestedOneWithoutCheckoutInput
    checkoutItems?: checkoutItemsCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutUncheckedCreateInput = {
    transactionID: number
    workerID?: number | null
    customerID?: string | null
    checkoutDate?: Date | string | null
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutUpdateInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    student?: studentUpdateOneWithoutCheckoutNestedInput
    employee?: employeeUpdateOneWithoutCheckoutNestedInput
    checkoutItems?: checkoutItemsUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    workerID?: NullableIntFieldUpdateOperationsInput | number | null
    customerID?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutCreateManyInput = {
    transactionID: number
    workerID?: number | null
    customerID?: string | null
    checkoutDate?: Date | string | null
  }

  export type checkoutUpdateManyMutationInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type checkoutUncheckedUpdateManyInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    workerID?: NullableIntFieldUpdateOperationsInput | number | null
    customerID?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type checkoutItemsCreateInput = {
    quantity?: number | null
    value?: number | null
    item: itemCreateNestedOneWithoutCheckoutItemsInput
    checkout: checkoutCreateNestedOneWithoutCheckoutItemsInput
  }

  export type checkoutItemsUncheckedCreateInput = {
    transactionID: number
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    item?: itemUpdateOneRequiredWithoutCheckoutItemsNestedInput
    checkout?: checkoutUpdateOneRequiredWithoutCheckoutItemsNestedInput
  }

  export type checkoutItemsUncheckedUpdateInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutItemsCreateManyInput = {
    transactionID: number
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutItemsUncheckedUpdateManyInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type donorsCreateInput = {
    ID: number
    affiliation?: string | null
    donationCount?: number | null
    lastDonation?: Date | string | null
    donationDescript?: string | null
    estDonValue?: Decimal | DecimalJsLike | number | string | null
  }

  export type donorsUncheckedCreateInput = {
    ID: number
    affiliation?: string | null
    donationCount?: number | null
    lastDonation?: Date | string | null
    donationDescript?: string | null
    estDonValue?: Decimal | DecimalJsLike | number | string | null
  }

  export type donorsUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    donationCount?: NullableIntFieldUpdateOperationsInput | number | null
    lastDonation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    donationDescript?: NullableStringFieldUpdateOperationsInput | string | null
    estDonValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type donorsUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    donationCount?: NullableIntFieldUpdateOperationsInput | number | null
    lastDonation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    donationDescript?: NullableStringFieldUpdateOperationsInput | string | null
    estDonValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type donorsCreateManyInput = {
    ID: number
    affiliation?: string | null
    donationCount?: number | null
    lastDonation?: Date | string | null
    donationDescript?: string | null
    estDonValue?: Decimal | DecimalJsLike | number | string | null
  }

  export type donorsUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    donationCount?: NullableIntFieldUpdateOperationsInput | number | null
    lastDonation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    donationDescript?: NullableStringFieldUpdateOperationsInput | string | null
    estDonValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type donorsUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    affiliation?: NullableStringFieldUpdateOperationsInput | string | null
    donationCount?: NullableIntFieldUpdateOperationsInput | number | null
    lastDonation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    donationDescript?: NullableStringFieldUpdateOperationsInput | string | null
    estDonValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type employeeCreateInput = {
    ID: number
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutCreateNestedManyWithoutEmployeeInput
    student?: studentCreateNestedOneWithoutEmployeeInput
  }

  export type employeeUncheckedCreateInput = {
    ID: number
    studentID?: string | null
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeeUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUpdateManyWithoutEmployeeNestedInput
    student?: studentUpdateOneWithoutEmployeeNestedInput
  }

  export type employeeUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    studentID?: NullableStringFieldUpdateOperationsInput | string | null
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeeCreateManyInput = {
    ID: number
    studentID?: string | null
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
  }

  export type employeeUpdateManyMutationInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type employeeUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    studentID?: NullableStringFieldUpdateOperationsInput | string | null
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type itemCreateInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsCreateNestedManyWithoutItemInput
    checkoutItems?: checkoutItemsCreateNestedManyWithoutItemInput
    categories?: categoriesCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateInput = {
    itemID: number
    name?: string | null
    value?: number | null
    classification?: string | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutItemInput
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type itemUpdateInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUpdateManyWithoutItemNestedInput
    checkoutItems?: checkoutItemsUpdateManyWithoutItemNestedInput
    categories?: categoriesUpdateOneWithoutItemNestedInput
  }

  export type itemUncheckedUpdateInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutItemNestedInput
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type itemCreateManyInput = {
    itemID: number
    name?: string | null
    value?: number | null
    classification?: string | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
  }

  export type itemUpdateManyMutationInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type itemUncheckedUpdateManyInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studentCreateInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsCreateNestedManyWithoutStudentInput
    checkout?: checkoutCreateNestedManyWithoutStudentInput
    employee?: employeeCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutStudentInput
    checkout?: checkoutUncheckedCreateNestedManyWithoutStudentInput
    employee?: employeeUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentUpdateInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUpdateManyWithoutStudentNestedInput
    checkout?: checkoutUpdateManyWithoutStudentNestedInput
    employee?: employeeUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutStudentNestedInput
    checkout?: checkoutUncheckedUpdateManyWithoutStudentNestedInput
    employee?: employeeUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type studentCreateManyInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
  }

  export type studentUpdateManyMutationInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type studentUncheckedUpdateManyInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StudentRelationFilter = {
    is?: studentWhereInput
    isNot?: studentWhereInput
  }

  export type ItemRelationFilter = {
    is?: itemWhereInput
    isNot?: itemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type cartItemsCartIDItemIDCompoundUniqueInput = {
    cartID: number
    itemID: number
  }

  export type cartItemsCountOrderByAggregateInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type cartItemsAvgOrderByAggregateInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type cartItemsMaxOrderByAggregateInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type cartItemsMinOrderByAggregateInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type cartItemsSumOrderByAggregateInput = {
    cartID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ItemListRelationFilter = {
    every?: itemWhereInput
    some?: itemWhereInput
    none?: itemWhereInput
  }

  export type itemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    classification?: SortOrder
    items?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    items?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    classification?: SortOrder
    items?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    classification?: SortOrder
    items?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    items?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StudentNullableRelationFilter = {
    is?: studentWhereInput | null
    isNot?: studentWhereInput | null
  }

  export type EmployeeNullableRelationFilter = {
    is?: employeeWhereInput | null
    isNot?: employeeWhereInput | null
  }

  export type CheckoutItemsListRelationFilter = {
    every?: checkoutItemsWhereInput
    some?: checkoutItemsWhereInput
    none?: checkoutItemsWhereInput
  }

  export type checkoutItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type checkoutCountOrderByAggregateInput = {
    transactionID?: SortOrder
    workerID?: SortOrder
    customerID?: SortOrder
    checkoutDate?: SortOrder
  }

  export type checkoutAvgOrderByAggregateInput = {
    transactionID?: SortOrder
    workerID?: SortOrder
  }

  export type checkoutMaxOrderByAggregateInput = {
    transactionID?: SortOrder
    workerID?: SortOrder
    customerID?: SortOrder
    checkoutDate?: SortOrder
  }

  export type checkoutMinOrderByAggregateInput = {
    transactionID?: SortOrder
    workerID?: SortOrder
    customerID?: SortOrder
    checkoutDate?: SortOrder
  }

  export type checkoutSumOrderByAggregateInput = {
    transactionID?: SortOrder
    workerID?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CheckoutRelationFilter = {
    is?: checkoutWhereInput
    isNot?: checkoutWhereInput
  }

  export type checkoutItemsTransactionIDItemIDCompoundUniqueInput = {
    transactionID: number
    itemID: number
  }

  export type checkoutItemsCountOrderByAggregateInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type checkoutItemsAvgOrderByAggregateInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type checkoutItemsMaxOrderByAggregateInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type checkoutItemsMinOrderByAggregateInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type checkoutItemsSumOrderByAggregateInput = {
    transactionID?: SortOrder
    itemID?: SortOrder
    quantity?: SortOrder
    value?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type donorsCountOrderByAggregateInput = {
    ID?: SortOrder
    affiliation?: SortOrder
    donationCount?: SortOrder
    lastDonation?: SortOrder
    donationDescript?: SortOrder
    estDonValue?: SortOrder
  }

  export type donorsAvgOrderByAggregateInput = {
    ID?: SortOrder
    donationCount?: SortOrder
    estDonValue?: SortOrder
  }

  export type donorsMaxOrderByAggregateInput = {
    ID?: SortOrder
    affiliation?: SortOrder
    donationCount?: SortOrder
    lastDonation?: SortOrder
    donationDescript?: SortOrder
    estDonValue?: SortOrder
  }

  export type donorsMinOrderByAggregateInput = {
    ID?: SortOrder
    affiliation?: SortOrder
    donationCount?: SortOrder
    lastDonation?: SortOrder
    donationDescript?: SortOrder
    estDonValue?: SortOrder
  }

  export type donorsSumOrderByAggregateInput = {
    ID?: SortOrder
    donationCount?: SortOrder
    estDonValue?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type CheckoutListRelationFilter = {
    every?: checkoutWhereInput
    some?: checkoutWhereInput
    none?: checkoutWhereInput
  }

  export type checkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type employeeCountOrderByAggregateInput = {
    ID?: SortOrder
    studentID?: SortOrder
    hoursWorked?: SortOrder
    isPaid?: SortOrder
    salary?: SortOrder
  }

  export type employeeAvgOrderByAggregateInput = {
    ID?: SortOrder
    hoursWorked?: SortOrder
    salary?: SortOrder
  }

  export type employeeMaxOrderByAggregateInput = {
    ID?: SortOrder
    studentID?: SortOrder
    hoursWorked?: SortOrder
    isPaid?: SortOrder
    salary?: SortOrder
  }

  export type employeeMinOrderByAggregateInput = {
    ID?: SortOrder
    studentID?: SortOrder
    hoursWorked?: SortOrder
    isPaid?: SortOrder
    salary?: SortOrder
  }

  export type employeeSumOrderByAggregateInput = {
    ID?: SortOrder
    hoursWorked?: SortOrder
    salary?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CartItemsListRelationFilter = {
    every?: cartItemsWhereInput
    some?: cartItemsWhereInput
    none?: cartItemsWhereInput
  }

  export type CategoriesNullableRelationFilter = {
    is?: categoriesWhereInput | null
    isNot?: categoriesWhereInput | null
  }

  export type cartItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type itemCountOrderByAggregateInput = {
    itemID?: SortOrder
    name?: SortOrder
    value?: SortOrder
    classification?: SortOrder
    imgURL?: SortOrder
    stock?: SortOrder
    expirationDate?: SortOrder
  }

  export type itemAvgOrderByAggregateInput = {
    itemID?: SortOrder
    value?: SortOrder
    stock?: SortOrder
  }

  export type itemMaxOrderByAggregateInput = {
    itemID?: SortOrder
    name?: SortOrder
    value?: SortOrder
    classification?: SortOrder
    imgURL?: SortOrder
    stock?: SortOrder
    expirationDate?: SortOrder
  }

  export type itemMinOrderByAggregateInput = {
    itemID?: SortOrder
    name?: SortOrder
    value?: SortOrder
    classification?: SortOrder
    imgURL?: SortOrder
    stock?: SortOrder
    expirationDate?: SortOrder
  }

  export type itemSumOrderByAggregateInput = {
    itemID?: SortOrder
    value?: SortOrder
    stock?: SortOrder
  }

  export type EnumstatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableFilter<$PrismaModel> | $Enums.status | null
  }

  export type EmployeeListRelationFilter = {
    every?: employeeWhereInput
    some?: employeeWhereInput
    none?: employeeWhereInput
  }

  export type employeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentCountOrderByAggregateInput = {
    ID?: SortOrder
    fname?: SortOrder
    surname?: SortOrder
    grade?: SortOrder
    numVisits?: SortOrder
    current_status?: SortOrder
    major?: SortOrder
    gender?: SortOrder
    lastLogin?: SortOrder
    cartID?: SortOrder
    totalValue?: SortOrder
  }

  export type studentAvgOrderByAggregateInput = {
    numVisits?: SortOrder
    cartID?: SortOrder
    totalValue?: SortOrder
  }

  export type studentMaxOrderByAggregateInput = {
    ID?: SortOrder
    fname?: SortOrder
    surname?: SortOrder
    grade?: SortOrder
    numVisits?: SortOrder
    current_status?: SortOrder
    major?: SortOrder
    gender?: SortOrder
    lastLogin?: SortOrder
    cartID?: SortOrder
    totalValue?: SortOrder
  }

  export type studentMinOrderByAggregateInput = {
    ID?: SortOrder
    fname?: SortOrder
    surname?: SortOrder
    grade?: SortOrder
    numVisits?: SortOrder
    current_status?: SortOrder
    major?: SortOrder
    gender?: SortOrder
    lastLogin?: SortOrder
    cartID?: SortOrder
    totalValue?: SortOrder
  }

  export type studentSumOrderByAggregateInput = {
    numVisits?: SortOrder
    cartID?: SortOrder
    totalValue?: SortOrder
  }

  export type EnumstatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatusNullableFilter<$PrismaModel>
    _max?: NestedEnumstatusNullableFilter<$PrismaModel>
  }

  export type studentCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<studentCreateWithoutCartItemsInput, studentUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: studentCreateOrConnectWithoutCartItemsInput
    connect?: studentWhereUniqueInput
  }

  export type itemCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<itemCreateWithoutCartItemsInput, itemUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: itemCreateOrConnectWithoutCartItemsInput
    connect?: itemWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type studentUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<studentCreateWithoutCartItemsInput, studentUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: studentCreateOrConnectWithoutCartItemsInput
    upsert?: studentUpsertWithoutCartItemsInput
    connect?: studentWhereUniqueInput
    update?: XOR<XOR<studentUpdateToOneWithWhereWithoutCartItemsInput, studentUpdateWithoutCartItemsInput>, studentUncheckedUpdateWithoutCartItemsInput>
  }

  export type itemUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<itemCreateWithoutCartItemsInput, itemUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: itemCreateOrConnectWithoutCartItemsInput
    upsert?: itemUpsertWithoutCartItemsInput
    connect?: itemWhereUniqueInput
    update?: XOR<XOR<itemUpdateToOneWithWhereWithoutCartItemsInput, itemUpdateWithoutCartItemsInput>, itemUncheckedUpdateWithoutCartItemsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type itemCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput> | itemCreateWithoutCategoriesInput[] | itemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: itemCreateOrConnectWithoutCategoriesInput | itemCreateOrConnectWithoutCategoriesInput[]
    createMany?: itemCreateManyCategoriesInputEnvelope
    connect?: itemWhereUniqueInput | itemWhereUniqueInput[]
  }

  export type itemUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput> | itemCreateWithoutCategoriesInput[] | itemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: itemCreateOrConnectWithoutCategoriesInput | itemCreateOrConnectWithoutCategoriesInput[]
    createMany?: itemCreateManyCategoriesInputEnvelope
    connect?: itemWhereUniqueInput | itemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type itemUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput> | itemCreateWithoutCategoriesInput[] | itemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: itemCreateOrConnectWithoutCategoriesInput | itemCreateOrConnectWithoutCategoriesInput[]
    upsert?: itemUpsertWithWhereUniqueWithoutCategoriesInput | itemUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: itemCreateManyCategoriesInputEnvelope
    set?: itemWhereUniqueInput | itemWhereUniqueInput[]
    disconnect?: itemWhereUniqueInput | itemWhereUniqueInput[]
    delete?: itemWhereUniqueInput | itemWhereUniqueInput[]
    connect?: itemWhereUniqueInput | itemWhereUniqueInput[]
    update?: itemUpdateWithWhereUniqueWithoutCategoriesInput | itemUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: itemUpdateManyWithWhereWithoutCategoriesInput | itemUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: itemScalarWhereInput | itemScalarWhereInput[]
  }

  export type itemUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput> | itemCreateWithoutCategoriesInput[] | itemUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: itemCreateOrConnectWithoutCategoriesInput | itemCreateOrConnectWithoutCategoriesInput[]
    upsert?: itemUpsertWithWhereUniqueWithoutCategoriesInput | itemUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: itemCreateManyCategoriesInputEnvelope
    set?: itemWhereUniqueInput | itemWhereUniqueInput[]
    disconnect?: itemWhereUniqueInput | itemWhereUniqueInput[]
    delete?: itemWhereUniqueInput | itemWhereUniqueInput[]
    connect?: itemWhereUniqueInput | itemWhereUniqueInput[]
    update?: itemUpdateWithWhereUniqueWithoutCategoriesInput | itemUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: itemUpdateManyWithWhereWithoutCategoriesInput | itemUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: itemScalarWhereInput | itemScalarWhereInput[]
  }

  export type studentCreateNestedOneWithoutCheckoutInput = {
    create?: XOR<studentCreateWithoutCheckoutInput, studentUncheckedCreateWithoutCheckoutInput>
    connectOrCreate?: studentCreateOrConnectWithoutCheckoutInput
    connect?: studentWhereUniqueInput
  }

  export type employeeCreateNestedOneWithoutCheckoutInput = {
    create?: XOR<employeeCreateWithoutCheckoutInput, employeeUncheckedCreateWithoutCheckoutInput>
    connectOrCreate?: employeeCreateOrConnectWithoutCheckoutInput
    connect?: employeeWhereUniqueInput
  }

  export type checkoutItemsCreateNestedManyWithoutCheckoutInput = {
    create?: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput> | checkoutItemsCreateWithoutCheckoutInput[] | checkoutItemsUncheckedCreateWithoutCheckoutInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutCheckoutInput | checkoutItemsCreateOrConnectWithoutCheckoutInput[]
    createMany?: checkoutItemsCreateManyCheckoutInputEnvelope
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
  }

  export type checkoutItemsUncheckedCreateNestedManyWithoutCheckoutInput = {
    create?: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput> | checkoutItemsCreateWithoutCheckoutInput[] | checkoutItemsUncheckedCreateWithoutCheckoutInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutCheckoutInput | checkoutItemsCreateOrConnectWithoutCheckoutInput[]
    createMany?: checkoutItemsCreateManyCheckoutInputEnvelope
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type studentUpdateOneWithoutCheckoutNestedInput = {
    create?: XOR<studentCreateWithoutCheckoutInput, studentUncheckedCreateWithoutCheckoutInput>
    connectOrCreate?: studentCreateOrConnectWithoutCheckoutInput
    upsert?: studentUpsertWithoutCheckoutInput
    disconnect?: studentWhereInput | boolean
    delete?: studentWhereInput | boolean
    connect?: studentWhereUniqueInput
    update?: XOR<XOR<studentUpdateToOneWithWhereWithoutCheckoutInput, studentUpdateWithoutCheckoutInput>, studentUncheckedUpdateWithoutCheckoutInput>
  }

  export type employeeUpdateOneWithoutCheckoutNestedInput = {
    create?: XOR<employeeCreateWithoutCheckoutInput, employeeUncheckedCreateWithoutCheckoutInput>
    connectOrCreate?: employeeCreateOrConnectWithoutCheckoutInput
    upsert?: employeeUpsertWithoutCheckoutInput
    disconnect?: employeeWhereInput | boolean
    delete?: employeeWhereInput | boolean
    connect?: employeeWhereUniqueInput
    update?: XOR<XOR<employeeUpdateToOneWithWhereWithoutCheckoutInput, employeeUpdateWithoutCheckoutInput>, employeeUncheckedUpdateWithoutCheckoutInput>
  }

  export type checkoutItemsUpdateManyWithoutCheckoutNestedInput = {
    create?: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput> | checkoutItemsCreateWithoutCheckoutInput[] | checkoutItemsUncheckedCreateWithoutCheckoutInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutCheckoutInput | checkoutItemsCreateOrConnectWithoutCheckoutInput[]
    upsert?: checkoutItemsUpsertWithWhereUniqueWithoutCheckoutInput | checkoutItemsUpsertWithWhereUniqueWithoutCheckoutInput[]
    createMany?: checkoutItemsCreateManyCheckoutInputEnvelope
    set?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    disconnect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    delete?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    update?: checkoutItemsUpdateWithWhereUniqueWithoutCheckoutInput | checkoutItemsUpdateWithWhereUniqueWithoutCheckoutInput[]
    updateMany?: checkoutItemsUpdateManyWithWhereWithoutCheckoutInput | checkoutItemsUpdateManyWithWhereWithoutCheckoutInput[]
    deleteMany?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type checkoutItemsUncheckedUpdateManyWithoutCheckoutNestedInput = {
    create?: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput> | checkoutItemsCreateWithoutCheckoutInput[] | checkoutItemsUncheckedCreateWithoutCheckoutInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutCheckoutInput | checkoutItemsCreateOrConnectWithoutCheckoutInput[]
    upsert?: checkoutItemsUpsertWithWhereUniqueWithoutCheckoutInput | checkoutItemsUpsertWithWhereUniqueWithoutCheckoutInput[]
    createMany?: checkoutItemsCreateManyCheckoutInputEnvelope
    set?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    disconnect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    delete?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    update?: checkoutItemsUpdateWithWhereUniqueWithoutCheckoutInput | checkoutItemsUpdateWithWhereUniqueWithoutCheckoutInput[]
    updateMany?: checkoutItemsUpdateManyWithWhereWithoutCheckoutInput | checkoutItemsUpdateManyWithWhereWithoutCheckoutInput[]
    deleteMany?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
  }

  export type itemCreateNestedOneWithoutCheckoutItemsInput = {
    create?: XOR<itemCreateWithoutCheckoutItemsInput, itemUncheckedCreateWithoutCheckoutItemsInput>
    connectOrCreate?: itemCreateOrConnectWithoutCheckoutItemsInput
    connect?: itemWhereUniqueInput
  }

  export type checkoutCreateNestedOneWithoutCheckoutItemsInput = {
    create?: XOR<checkoutCreateWithoutCheckoutItemsInput, checkoutUncheckedCreateWithoutCheckoutItemsInput>
    connectOrCreate?: checkoutCreateOrConnectWithoutCheckoutItemsInput
    connect?: checkoutWhereUniqueInput
  }

  export type itemUpdateOneRequiredWithoutCheckoutItemsNestedInput = {
    create?: XOR<itemCreateWithoutCheckoutItemsInput, itemUncheckedCreateWithoutCheckoutItemsInput>
    connectOrCreate?: itemCreateOrConnectWithoutCheckoutItemsInput
    upsert?: itemUpsertWithoutCheckoutItemsInput
    connect?: itemWhereUniqueInput
    update?: XOR<XOR<itemUpdateToOneWithWhereWithoutCheckoutItemsInput, itemUpdateWithoutCheckoutItemsInput>, itemUncheckedUpdateWithoutCheckoutItemsInput>
  }

  export type checkoutUpdateOneRequiredWithoutCheckoutItemsNestedInput = {
    create?: XOR<checkoutCreateWithoutCheckoutItemsInput, checkoutUncheckedCreateWithoutCheckoutItemsInput>
    connectOrCreate?: checkoutCreateOrConnectWithoutCheckoutItemsInput
    upsert?: checkoutUpsertWithoutCheckoutItemsInput
    connect?: checkoutWhereUniqueInput
    update?: XOR<XOR<checkoutUpdateToOneWithWhereWithoutCheckoutItemsInput, checkoutUpdateWithoutCheckoutItemsInput>, checkoutUncheckedUpdateWithoutCheckoutItemsInput>
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type checkoutCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput> | checkoutCreateWithoutEmployeeInput[] | checkoutUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutEmployeeInput | checkoutCreateOrConnectWithoutEmployeeInput[]
    createMany?: checkoutCreateManyEmployeeInputEnvelope
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
  }

  export type studentCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<studentCreateWithoutEmployeeInput, studentUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: studentCreateOrConnectWithoutEmployeeInput
    connect?: studentWhereUniqueInput
  }

  export type checkoutUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput> | checkoutCreateWithoutEmployeeInput[] | checkoutUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutEmployeeInput | checkoutCreateOrConnectWithoutEmployeeInput[]
    createMany?: checkoutCreateManyEmployeeInputEnvelope
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type checkoutUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput> | checkoutCreateWithoutEmployeeInput[] | checkoutUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutEmployeeInput | checkoutCreateOrConnectWithoutEmployeeInput[]
    upsert?: checkoutUpsertWithWhereUniqueWithoutEmployeeInput | checkoutUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: checkoutCreateManyEmployeeInputEnvelope
    set?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    disconnect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    delete?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    update?: checkoutUpdateWithWhereUniqueWithoutEmployeeInput | checkoutUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: checkoutUpdateManyWithWhereWithoutEmployeeInput | checkoutUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
  }

  export type studentUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<studentCreateWithoutEmployeeInput, studentUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: studentCreateOrConnectWithoutEmployeeInput
    upsert?: studentUpsertWithoutEmployeeInput
    disconnect?: studentWhereInput | boolean
    delete?: studentWhereInput | boolean
    connect?: studentWhereUniqueInput
    update?: XOR<XOR<studentUpdateToOneWithWhereWithoutEmployeeInput, studentUpdateWithoutEmployeeInput>, studentUncheckedUpdateWithoutEmployeeInput>
  }

  export type checkoutUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput> | checkoutCreateWithoutEmployeeInput[] | checkoutUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutEmployeeInput | checkoutCreateOrConnectWithoutEmployeeInput[]
    upsert?: checkoutUpsertWithWhereUniqueWithoutEmployeeInput | checkoutUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: checkoutCreateManyEmployeeInputEnvelope
    set?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    disconnect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    delete?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    update?: checkoutUpdateWithWhereUniqueWithoutEmployeeInput | checkoutUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: checkoutUpdateManyWithWhereWithoutEmployeeInput | checkoutUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
  }

  export type cartItemsCreateNestedManyWithoutItemInput = {
    create?: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput> | cartItemsCreateWithoutItemInput[] | cartItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutItemInput | cartItemsCreateOrConnectWithoutItemInput[]
    createMany?: cartItemsCreateManyItemInputEnvelope
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
  }

  export type checkoutItemsCreateNestedManyWithoutItemInput = {
    create?: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput> | checkoutItemsCreateWithoutItemInput[] | checkoutItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutItemInput | checkoutItemsCreateOrConnectWithoutItemInput[]
    createMany?: checkoutItemsCreateManyItemInputEnvelope
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
  }

  export type categoriesCreateNestedOneWithoutItemInput = {
    create?: XOR<categoriesCreateWithoutItemInput, categoriesUncheckedCreateWithoutItemInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutItemInput
    connect?: categoriesWhereUniqueInput
  }

  export type cartItemsUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput> | cartItemsCreateWithoutItemInput[] | cartItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutItemInput | cartItemsCreateOrConnectWithoutItemInput[]
    createMany?: cartItemsCreateManyItemInputEnvelope
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
  }

  export type checkoutItemsUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput> | checkoutItemsCreateWithoutItemInput[] | checkoutItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutItemInput | checkoutItemsCreateOrConnectWithoutItemInput[]
    createMany?: checkoutItemsCreateManyItemInputEnvelope
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
  }

  export type cartItemsUpdateManyWithoutItemNestedInput = {
    create?: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput> | cartItemsCreateWithoutItemInput[] | cartItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutItemInput | cartItemsCreateOrConnectWithoutItemInput[]
    upsert?: cartItemsUpsertWithWhereUniqueWithoutItemInput | cartItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: cartItemsCreateManyItemInputEnvelope
    set?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    disconnect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    delete?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    update?: cartItemsUpdateWithWhereUniqueWithoutItemInput | cartItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: cartItemsUpdateManyWithWhereWithoutItemInput | cartItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
  }

  export type checkoutItemsUpdateManyWithoutItemNestedInput = {
    create?: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput> | checkoutItemsCreateWithoutItemInput[] | checkoutItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutItemInput | checkoutItemsCreateOrConnectWithoutItemInput[]
    upsert?: checkoutItemsUpsertWithWhereUniqueWithoutItemInput | checkoutItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: checkoutItemsCreateManyItemInputEnvelope
    set?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    disconnect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    delete?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    update?: checkoutItemsUpdateWithWhereUniqueWithoutItemInput | checkoutItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: checkoutItemsUpdateManyWithWhereWithoutItemInput | checkoutItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
  }

  export type categoriesUpdateOneWithoutItemNestedInput = {
    create?: XOR<categoriesCreateWithoutItemInput, categoriesUncheckedCreateWithoutItemInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutItemInput
    upsert?: categoriesUpsertWithoutItemInput
    disconnect?: categoriesWhereInput | boolean
    delete?: categoriesWhereInput | boolean
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutItemInput, categoriesUpdateWithoutItemInput>, categoriesUncheckedUpdateWithoutItemInput>
  }

  export type cartItemsUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput> | cartItemsCreateWithoutItemInput[] | cartItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutItemInput | cartItemsCreateOrConnectWithoutItemInput[]
    upsert?: cartItemsUpsertWithWhereUniqueWithoutItemInput | cartItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: cartItemsCreateManyItemInputEnvelope
    set?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    disconnect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    delete?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    update?: cartItemsUpdateWithWhereUniqueWithoutItemInput | cartItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: cartItemsUpdateManyWithWhereWithoutItemInput | cartItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
  }

  export type checkoutItemsUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput> | checkoutItemsCreateWithoutItemInput[] | checkoutItemsUncheckedCreateWithoutItemInput[]
    connectOrCreate?: checkoutItemsCreateOrConnectWithoutItemInput | checkoutItemsCreateOrConnectWithoutItemInput[]
    upsert?: checkoutItemsUpsertWithWhereUniqueWithoutItemInput | checkoutItemsUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: checkoutItemsCreateManyItemInputEnvelope
    set?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    disconnect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    delete?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    connect?: checkoutItemsWhereUniqueInput | checkoutItemsWhereUniqueInput[]
    update?: checkoutItemsUpdateWithWhereUniqueWithoutItemInput | checkoutItemsUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: checkoutItemsUpdateManyWithWhereWithoutItemInput | checkoutItemsUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
  }

  export type cartItemsCreateNestedManyWithoutStudentInput = {
    create?: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput> | cartItemsCreateWithoutStudentInput[] | cartItemsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutStudentInput | cartItemsCreateOrConnectWithoutStudentInput[]
    createMany?: cartItemsCreateManyStudentInputEnvelope
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
  }

  export type checkoutCreateNestedManyWithoutStudentInput = {
    create?: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput> | checkoutCreateWithoutStudentInput[] | checkoutUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutStudentInput | checkoutCreateOrConnectWithoutStudentInput[]
    createMany?: checkoutCreateManyStudentInputEnvelope
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
  }

  export type employeeCreateNestedManyWithoutStudentInput = {
    create?: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput> | employeeCreateWithoutStudentInput[] | employeeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: employeeCreateOrConnectWithoutStudentInput | employeeCreateOrConnectWithoutStudentInput[]
    createMany?: employeeCreateManyStudentInputEnvelope
    connect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
  }

  export type cartItemsUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput> | cartItemsCreateWithoutStudentInput[] | cartItemsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutStudentInput | cartItemsCreateOrConnectWithoutStudentInput[]
    createMany?: cartItemsCreateManyStudentInputEnvelope
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
  }

  export type checkoutUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput> | checkoutCreateWithoutStudentInput[] | checkoutUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutStudentInput | checkoutCreateOrConnectWithoutStudentInput[]
    createMany?: checkoutCreateManyStudentInputEnvelope
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
  }

  export type employeeUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput> | employeeCreateWithoutStudentInput[] | employeeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: employeeCreateOrConnectWithoutStudentInput | employeeCreateOrConnectWithoutStudentInput[]
    createMany?: employeeCreateManyStudentInputEnvelope
    connect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
  }

  export type NullableEnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status | null
  }

  export type cartItemsUpdateManyWithoutStudentNestedInput = {
    create?: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput> | cartItemsCreateWithoutStudentInput[] | cartItemsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutStudentInput | cartItemsCreateOrConnectWithoutStudentInput[]
    upsert?: cartItemsUpsertWithWhereUniqueWithoutStudentInput | cartItemsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: cartItemsCreateManyStudentInputEnvelope
    set?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    disconnect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    delete?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    update?: cartItemsUpdateWithWhereUniqueWithoutStudentInput | cartItemsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: cartItemsUpdateManyWithWhereWithoutStudentInput | cartItemsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
  }

  export type checkoutUpdateManyWithoutStudentNestedInput = {
    create?: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput> | checkoutCreateWithoutStudentInput[] | checkoutUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutStudentInput | checkoutCreateOrConnectWithoutStudentInput[]
    upsert?: checkoutUpsertWithWhereUniqueWithoutStudentInput | checkoutUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: checkoutCreateManyStudentInputEnvelope
    set?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    disconnect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    delete?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    update?: checkoutUpdateWithWhereUniqueWithoutStudentInput | checkoutUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: checkoutUpdateManyWithWhereWithoutStudentInput | checkoutUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
  }

  export type employeeUpdateManyWithoutStudentNestedInput = {
    create?: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput> | employeeCreateWithoutStudentInput[] | employeeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: employeeCreateOrConnectWithoutStudentInput | employeeCreateOrConnectWithoutStudentInput[]
    upsert?: employeeUpsertWithWhereUniqueWithoutStudentInput | employeeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: employeeCreateManyStudentInputEnvelope
    set?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    disconnect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    delete?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    connect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    update?: employeeUpdateWithWhereUniqueWithoutStudentInput | employeeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: employeeUpdateManyWithWhereWithoutStudentInput | employeeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: employeeScalarWhereInput | employeeScalarWhereInput[]
  }

  export type cartItemsUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput> | cartItemsCreateWithoutStudentInput[] | cartItemsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: cartItemsCreateOrConnectWithoutStudentInput | cartItemsCreateOrConnectWithoutStudentInput[]
    upsert?: cartItemsUpsertWithWhereUniqueWithoutStudentInput | cartItemsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: cartItemsCreateManyStudentInputEnvelope
    set?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    disconnect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    delete?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    connect?: cartItemsWhereUniqueInput | cartItemsWhereUniqueInput[]
    update?: cartItemsUpdateWithWhereUniqueWithoutStudentInput | cartItemsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: cartItemsUpdateManyWithWhereWithoutStudentInput | cartItemsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
  }

  export type checkoutUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput> | checkoutCreateWithoutStudentInput[] | checkoutUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: checkoutCreateOrConnectWithoutStudentInput | checkoutCreateOrConnectWithoutStudentInput[]
    upsert?: checkoutUpsertWithWhereUniqueWithoutStudentInput | checkoutUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: checkoutCreateManyStudentInputEnvelope
    set?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    disconnect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    delete?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    connect?: checkoutWhereUniqueInput | checkoutWhereUniqueInput[]
    update?: checkoutUpdateWithWhereUniqueWithoutStudentInput | checkoutUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: checkoutUpdateManyWithWhereWithoutStudentInput | checkoutUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
  }

  export type employeeUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput> | employeeCreateWithoutStudentInput[] | employeeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: employeeCreateOrConnectWithoutStudentInput | employeeCreateOrConnectWithoutStudentInput[]
    upsert?: employeeUpsertWithWhereUniqueWithoutStudentInput | employeeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: employeeCreateManyStudentInputEnvelope
    set?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    disconnect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    delete?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    connect?: employeeWhereUniqueInput | employeeWhereUniqueInput[]
    update?: employeeUpdateWithWhereUniqueWithoutStudentInput | employeeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: employeeUpdateManyWithWhereWithoutStudentInput | employeeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: employeeScalarWhereInput | employeeScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumstatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableFilter<$PrismaModel> | $Enums.status | null
  }

  export type NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatusNullableFilter<$PrismaModel>
    _max?: NestedEnumstatusNullableFilter<$PrismaModel>
  }

  export type studentCreateWithoutCartItemsInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    checkout?: checkoutCreateNestedManyWithoutStudentInput
    employee?: employeeCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutCartItemsInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    checkout?: checkoutUncheckedCreateNestedManyWithoutStudentInput
    employee?: employeeUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutCartItemsInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutCartItemsInput, studentUncheckedCreateWithoutCartItemsInput>
  }

  export type itemCreateWithoutCartItemsInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    checkoutItems?: checkoutItemsCreateNestedManyWithoutItemInput
    categories?: categoriesCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateWithoutCartItemsInput = {
    itemID: number
    name?: string | null
    value?: number | null
    classification?: string | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type itemCreateOrConnectWithoutCartItemsInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutCartItemsInput, itemUncheckedCreateWithoutCartItemsInput>
  }

  export type studentUpsertWithoutCartItemsInput = {
    update: XOR<studentUpdateWithoutCartItemsInput, studentUncheckedUpdateWithoutCartItemsInput>
    create: XOR<studentCreateWithoutCartItemsInput, studentUncheckedCreateWithoutCartItemsInput>
    where?: studentWhereInput
  }

  export type studentUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: studentWhereInput
    data: XOR<studentUpdateWithoutCartItemsInput, studentUncheckedUpdateWithoutCartItemsInput>
  }

  export type studentUpdateWithoutCartItemsInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    checkout?: checkoutUpdateManyWithoutStudentNestedInput
    employee?: employeeUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateWithoutCartItemsInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    checkout?: checkoutUncheckedUpdateManyWithoutStudentNestedInput
    employee?: employeeUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type itemUpsertWithoutCartItemsInput = {
    update: XOR<itemUpdateWithoutCartItemsInput, itemUncheckedUpdateWithoutCartItemsInput>
    create: XOR<itemCreateWithoutCartItemsInput, itemUncheckedCreateWithoutCartItemsInput>
    where?: itemWhereInput
  }

  export type itemUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: itemWhereInput
    data: XOR<itemUpdateWithoutCartItemsInput, itemUncheckedUpdateWithoutCartItemsInput>
  }

  export type itemUpdateWithoutCartItemsInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkoutItems?: checkoutItemsUpdateManyWithoutItemNestedInput
    categories?: categoriesUpdateOneWithoutItemNestedInput
  }

  export type itemUncheckedUpdateWithoutCartItemsInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type itemCreateWithoutCategoriesInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsCreateNestedManyWithoutItemInput
    checkoutItems?: checkoutItemsCreateNestedManyWithoutItemInput
  }

  export type itemUncheckedCreateWithoutCategoriesInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutItemInput
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type itemCreateOrConnectWithoutCategoriesInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput>
  }

  export type itemCreateManyCategoriesInputEnvelope = {
    data: itemCreateManyCategoriesInput | itemCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type itemUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: itemWhereUniqueInput
    update: XOR<itemUpdateWithoutCategoriesInput, itemUncheckedUpdateWithoutCategoriesInput>
    create: XOR<itemCreateWithoutCategoriesInput, itemUncheckedCreateWithoutCategoriesInput>
  }

  export type itemUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: itemWhereUniqueInput
    data: XOR<itemUpdateWithoutCategoriesInput, itemUncheckedUpdateWithoutCategoriesInput>
  }

  export type itemUpdateManyWithWhereWithoutCategoriesInput = {
    where: itemScalarWhereInput
    data: XOR<itemUpdateManyMutationInput, itemUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type itemScalarWhereInput = {
    AND?: itemScalarWhereInput | itemScalarWhereInput[]
    OR?: itemScalarWhereInput[]
    NOT?: itemScalarWhereInput | itemScalarWhereInput[]
    itemID?: IntFilter<"item"> | number
    name?: StringNullableFilter<"item"> | string | null
    value?: IntNullableFilter<"item"> | number | null
    classification?: StringNullableFilter<"item"> | string | null
    imgURL?: StringNullableFilter<"item"> | string | null
    stock?: IntNullableFilter<"item"> | number | null
    expirationDate?: DateTimeNullableFilter<"item"> | Date | string | null
  }

  export type studentCreateWithoutCheckoutInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsCreateNestedManyWithoutStudentInput
    employee?: employeeCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutCheckoutInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutStudentInput
    employee?: employeeUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutCheckoutInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutCheckoutInput, studentUncheckedCreateWithoutCheckoutInput>
  }

  export type employeeCreateWithoutCheckoutInput = {
    ID: number
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
    student?: studentCreateNestedOneWithoutEmployeeInput
  }

  export type employeeUncheckedCreateWithoutCheckoutInput = {
    ID: number
    studentID?: string | null
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
  }

  export type employeeCreateOrConnectWithoutCheckoutInput = {
    where: employeeWhereUniqueInput
    create: XOR<employeeCreateWithoutCheckoutInput, employeeUncheckedCreateWithoutCheckoutInput>
  }

  export type checkoutItemsCreateWithoutCheckoutInput = {
    quantity?: number | null
    value?: number | null
    item: itemCreateNestedOneWithoutCheckoutItemsInput
  }

  export type checkoutItemsUncheckedCreateWithoutCheckoutInput = {
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsCreateOrConnectWithoutCheckoutInput = {
    where: checkoutItemsWhereUniqueInput
    create: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput>
  }

  export type checkoutItemsCreateManyCheckoutInputEnvelope = {
    data: checkoutItemsCreateManyCheckoutInput | checkoutItemsCreateManyCheckoutInput[]
    skipDuplicates?: boolean
  }

  export type studentUpsertWithoutCheckoutInput = {
    update: XOR<studentUpdateWithoutCheckoutInput, studentUncheckedUpdateWithoutCheckoutInput>
    create: XOR<studentCreateWithoutCheckoutInput, studentUncheckedCreateWithoutCheckoutInput>
    where?: studentWhereInput
  }

  export type studentUpdateToOneWithWhereWithoutCheckoutInput = {
    where?: studentWhereInput
    data: XOR<studentUpdateWithoutCheckoutInput, studentUncheckedUpdateWithoutCheckoutInput>
  }

  export type studentUpdateWithoutCheckoutInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUpdateManyWithoutStudentNestedInput
    employee?: employeeUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateWithoutCheckoutInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutStudentNestedInput
    employee?: employeeUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type employeeUpsertWithoutCheckoutInput = {
    update: XOR<employeeUpdateWithoutCheckoutInput, employeeUncheckedUpdateWithoutCheckoutInput>
    create: XOR<employeeCreateWithoutCheckoutInput, employeeUncheckedCreateWithoutCheckoutInput>
    where?: employeeWhereInput
  }

  export type employeeUpdateToOneWithWhereWithoutCheckoutInput = {
    where?: employeeWhereInput
    data: XOR<employeeUpdateWithoutCheckoutInput, employeeUncheckedUpdateWithoutCheckoutInput>
  }

  export type employeeUpdateWithoutCheckoutInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    student?: studentUpdateOneWithoutEmployeeNestedInput
  }

  export type employeeUncheckedUpdateWithoutCheckoutInput = {
    ID?: IntFieldUpdateOperationsInput | number
    studentID?: NullableStringFieldUpdateOperationsInput | string | null
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type checkoutItemsUpsertWithWhereUniqueWithoutCheckoutInput = {
    where: checkoutItemsWhereUniqueInput
    update: XOR<checkoutItemsUpdateWithoutCheckoutInput, checkoutItemsUncheckedUpdateWithoutCheckoutInput>
    create: XOR<checkoutItemsCreateWithoutCheckoutInput, checkoutItemsUncheckedCreateWithoutCheckoutInput>
  }

  export type checkoutItemsUpdateWithWhereUniqueWithoutCheckoutInput = {
    where: checkoutItemsWhereUniqueInput
    data: XOR<checkoutItemsUpdateWithoutCheckoutInput, checkoutItemsUncheckedUpdateWithoutCheckoutInput>
  }

  export type checkoutItemsUpdateManyWithWhereWithoutCheckoutInput = {
    where: checkoutItemsScalarWhereInput
    data: XOR<checkoutItemsUpdateManyMutationInput, checkoutItemsUncheckedUpdateManyWithoutCheckoutInput>
  }

  export type checkoutItemsScalarWhereInput = {
    AND?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
    OR?: checkoutItemsScalarWhereInput[]
    NOT?: checkoutItemsScalarWhereInput | checkoutItemsScalarWhereInput[]
    transactionID?: IntFilter<"checkoutItems"> | number
    itemID?: IntFilter<"checkoutItems"> | number
    quantity?: IntNullableFilter<"checkoutItems"> | number | null
    value?: IntNullableFilter<"checkoutItems"> | number | null
  }

  export type itemCreateWithoutCheckoutItemsInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsCreateNestedManyWithoutItemInput
    categories?: categoriesCreateNestedOneWithoutItemInput
  }

  export type itemUncheckedCreateWithoutCheckoutItemsInput = {
    itemID: number
    name?: string | null
    value?: number | null
    classification?: string | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutItemInput
  }

  export type itemCreateOrConnectWithoutCheckoutItemsInput = {
    where: itemWhereUniqueInput
    create: XOR<itemCreateWithoutCheckoutItemsInput, itemUncheckedCreateWithoutCheckoutItemsInput>
  }

  export type checkoutCreateWithoutCheckoutItemsInput = {
    transactionID: number
    checkoutDate?: Date | string | null
    student?: studentCreateNestedOneWithoutCheckoutInput
    employee?: employeeCreateNestedOneWithoutCheckoutInput
  }

  export type checkoutUncheckedCreateWithoutCheckoutItemsInput = {
    transactionID: number
    workerID?: number | null
    customerID?: string | null
    checkoutDate?: Date | string | null
  }

  export type checkoutCreateOrConnectWithoutCheckoutItemsInput = {
    where: checkoutWhereUniqueInput
    create: XOR<checkoutCreateWithoutCheckoutItemsInput, checkoutUncheckedCreateWithoutCheckoutItemsInput>
  }

  export type itemUpsertWithoutCheckoutItemsInput = {
    update: XOR<itemUpdateWithoutCheckoutItemsInput, itemUncheckedUpdateWithoutCheckoutItemsInput>
    create: XOR<itemCreateWithoutCheckoutItemsInput, itemUncheckedCreateWithoutCheckoutItemsInput>
    where?: itemWhereInput
  }

  export type itemUpdateToOneWithWhereWithoutCheckoutItemsInput = {
    where?: itemWhereInput
    data: XOR<itemUpdateWithoutCheckoutItemsInput, itemUncheckedUpdateWithoutCheckoutItemsInput>
  }

  export type itemUpdateWithoutCheckoutItemsInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUpdateManyWithoutItemNestedInput
    categories?: categoriesUpdateOneWithoutItemNestedInput
  }

  export type itemUncheckedUpdateWithoutCheckoutItemsInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type checkoutUpsertWithoutCheckoutItemsInput = {
    update: XOR<checkoutUpdateWithoutCheckoutItemsInput, checkoutUncheckedUpdateWithoutCheckoutItemsInput>
    create: XOR<checkoutCreateWithoutCheckoutItemsInput, checkoutUncheckedCreateWithoutCheckoutItemsInput>
    where?: checkoutWhereInput
  }

  export type checkoutUpdateToOneWithWhereWithoutCheckoutItemsInput = {
    where?: checkoutWhereInput
    data: XOR<checkoutUpdateWithoutCheckoutItemsInput, checkoutUncheckedUpdateWithoutCheckoutItemsInput>
  }

  export type checkoutUpdateWithoutCheckoutItemsInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    student?: studentUpdateOneWithoutCheckoutNestedInput
    employee?: employeeUpdateOneWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateWithoutCheckoutItemsInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    workerID?: NullableIntFieldUpdateOperationsInput | number | null
    customerID?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type checkoutCreateWithoutEmployeeInput = {
    transactionID: number
    checkoutDate?: Date | string | null
    student?: studentCreateNestedOneWithoutCheckoutInput
    checkoutItems?: checkoutItemsCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutUncheckedCreateWithoutEmployeeInput = {
    transactionID: number
    customerID?: string | null
    checkoutDate?: Date | string | null
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutCreateOrConnectWithoutEmployeeInput = {
    where: checkoutWhereUniqueInput
    create: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput>
  }

  export type checkoutCreateManyEmployeeInputEnvelope = {
    data: checkoutCreateManyEmployeeInput | checkoutCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type studentCreateWithoutEmployeeInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsCreateNestedManyWithoutStudentInput
    checkout?: checkoutCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutEmployeeInput = {
    ID: string
    fname?: string | null
    surname?: string | null
    grade?: string | null
    numVisits?: number | null
    current_status?: $Enums.status | null
    major?: string | null
    gender?: string | null
    lastLogin?: Date | string | null
    cartID?: number | null
    totalValue?: number | null
    cartItems?: cartItemsUncheckedCreateNestedManyWithoutStudentInput
    checkout?: checkoutUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutEmployeeInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutEmployeeInput, studentUncheckedCreateWithoutEmployeeInput>
  }

  export type checkoutUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: checkoutWhereUniqueInput
    update: XOR<checkoutUpdateWithoutEmployeeInput, checkoutUncheckedUpdateWithoutEmployeeInput>
    create: XOR<checkoutCreateWithoutEmployeeInput, checkoutUncheckedCreateWithoutEmployeeInput>
  }

  export type checkoutUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: checkoutWhereUniqueInput
    data: XOR<checkoutUpdateWithoutEmployeeInput, checkoutUncheckedUpdateWithoutEmployeeInput>
  }

  export type checkoutUpdateManyWithWhereWithoutEmployeeInput = {
    where: checkoutScalarWhereInput
    data: XOR<checkoutUpdateManyMutationInput, checkoutUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type checkoutScalarWhereInput = {
    AND?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
    OR?: checkoutScalarWhereInput[]
    NOT?: checkoutScalarWhereInput | checkoutScalarWhereInput[]
    transactionID?: IntFilter<"checkout"> | number
    workerID?: IntNullableFilter<"checkout"> | number | null
    customerID?: StringNullableFilter<"checkout"> | string | null
    checkoutDate?: DateTimeNullableFilter<"checkout"> | Date | string | null
  }

  export type studentUpsertWithoutEmployeeInput = {
    update: XOR<studentUpdateWithoutEmployeeInput, studentUncheckedUpdateWithoutEmployeeInput>
    create: XOR<studentCreateWithoutEmployeeInput, studentUncheckedCreateWithoutEmployeeInput>
    where?: studentWhereInput
  }

  export type studentUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: studentWhereInput
    data: XOR<studentUpdateWithoutEmployeeInput, studentUncheckedUpdateWithoutEmployeeInput>
  }

  export type studentUpdateWithoutEmployeeInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUpdateManyWithoutStudentNestedInput
    checkout?: checkoutUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateWithoutEmployeeInput = {
    ID?: StringFieldUpdateOperationsInput | string
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    numVisits?: NullableIntFieldUpdateOperationsInput | number | null
    current_status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartID?: NullableIntFieldUpdateOperationsInput | number | null
    totalValue?: NullableIntFieldUpdateOperationsInput | number | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutStudentNestedInput
    checkout?: checkoutUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type cartItemsCreateWithoutItemInput = {
    quantity?: number | null
    value?: number | null
    student: studentCreateNestedOneWithoutCartItemsInput
  }

  export type cartItemsUncheckedCreateWithoutItemInput = {
    cartID: number
    quantity?: number | null
    value?: number | null
  }

  export type cartItemsCreateOrConnectWithoutItemInput = {
    where: cartItemsWhereUniqueInput
    create: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput>
  }

  export type cartItemsCreateManyItemInputEnvelope = {
    data: cartItemsCreateManyItemInput | cartItemsCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type checkoutItemsCreateWithoutItemInput = {
    quantity?: number | null
    value?: number | null
    checkout: checkoutCreateNestedOneWithoutCheckoutItemsInput
  }

  export type checkoutItemsUncheckedCreateWithoutItemInput = {
    transactionID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsCreateOrConnectWithoutItemInput = {
    where: checkoutItemsWhereUniqueInput
    create: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput>
  }

  export type checkoutItemsCreateManyItemInputEnvelope = {
    data: checkoutItemsCreateManyItemInput | checkoutItemsCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type categoriesCreateWithoutItemInput = {
    classification: string
    items?: number | null
  }

  export type categoriesUncheckedCreateWithoutItemInput = {
    classification: string
    items?: number | null
  }

  export type categoriesCreateOrConnectWithoutItemInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutItemInput, categoriesUncheckedCreateWithoutItemInput>
  }

  export type cartItemsUpsertWithWhereUniqueWithoutItemInput = {
    where: cartItemsWhereUniqueInput
    update: XOR<cartItemsUpdateWithoutItemInput, cartItemsUncheckedUpdateWithoutItemInput>
    create: XOR<cartItemsCreateWithoutItemInput, cartItemsUncheckedCreateWithoutItemInput>
  }

  export type cartItemsUpdateWithWhereUniqueWithoutItemInput = {
    where: cartItemsWhereUniqueInput
    data: XOR<cartItemsUpdateWithoutItemInput, cartItemsUncheckedUpdateWithoutItemInput>
  }

  export type cartItemsUpdateManyWithWhereWithoutItemInput = {
    where: cartItemsScalarWhereInput
    data: XOR<cartItemsUpdateManyMutationInput, cartItemsUncheckedUpdateManyWithoutItemInput>
  }

  export type cartItemsScalarWhereInput = {
    AND?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
    OR?: cartItemsScalarWhereInput[]
    NOT?: cartItemsScalarWhereInput | cartItemsScalarWhereInput[]
    cartID?: IntFilter<"cartItems"> | number
    itemID?: IntFilter<"cartItems"> | number
    quantity?: IntNullableFilter<"cartItems"> | number | null
    value?: IntNullableFilter<"cartItems"> | number | null
  }

  export type checkoutItemsUpsertWithWhereUniqueWithoutItemInput = {
    where: checkoutItemsWhereUniqueInput
    update: XOR<checkoutItemsUpdateWithoutItemInput, checkoutItemsUncheckedUpdateWithoutItemInput>
    create: XOR<checkoutItemsCreateWithoutItemInput, checkoutItemsUncheckedCreateWithoutItemInput>
  }

  export type checkoutItemsUpdateWithWhereUniqueWithoutItemInput = {
    where: checkoutItemsWhereUniqueInput
    data: XOR<checkoutItemsUpdateWithoutItemInput, checkoutItemsUncheckedUpdateWithoutItemInput>
  }

  export type checkoutItemsUpdateManyWithWhereWithoutItemInput = {
    where: checkoutItemsScalarWhereInput
    data: XOR<checkoutItemsUpdateManyMutationInput, checkoutItemsUncheckedUpdateManyWithoutItemInput>
  }

  export type categoriesUpsertWithoutItemInput = {
    update: XOR<categoriesUpdateWithoutItemInput, categoriesUncheckedUpdateWithoutItemInput>
    create: XOR<categoriesCreateWithoutItemInput, categoriesUncheckedCreateWithoutItemInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutItemInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutItemInput, categoriesUncheckedUpdateWithoutItemInput>
  }

  export type categoriesUpdateWithoutItemInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoriesUncheckedUpdateWithoutItemInput = {
    classification?: StringFieldUpdateOperationsInput | string
    items?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsCreateWithoutStudentInput = {
    quantity?: number | null
    value?: number | null
    item: itemCreateNestedOneWithoutCartItemsInput
  }

  export type cartItemsUncheckedCreateWithoutStudentInput = {
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type cartItemsCreateOrConnectWithoutStudentInput = {
    where: cartItemsWhereUniqueInput
    create: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput>
  }

  export type cartItemsCreateManyStudentInputEnvelope = {
    data: cartItemsCreateManyStudentInput | cartItemsCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type checkoutCreateWithoutStudentInput = {
    transactionID: number
    checkoutDate?: Date | string | null
    employee?: employeeCreateNestedOneWithoutCheckoutInput
    checkoutItems?: checkoutItemsCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutUncheckedCreateWithoutStudentInput = {
    transactionID: number
    workerID?: number | null
    checkoutDate?: Date | string | null
    checkoutItems?: checkoutItemsUncheckedCreateNestedManyWithoutCheckoutInput
  }

  export type checkoutCreateOrConnectWithoutStudentInput = {
    where: checkoutWhereUniqueInput
    create: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput>
  }

  export type checkoutCreateManyStudentInputEnvelope = {
    data: checkoutCreateManyStudentInput | checkoutCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type employeeCreateWithoutStudentInput = {
    ID: number
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutCreateNestedManyWithoutEmployeeInput
  }

  export type employeeUncheckedCreateWithoutStudentInput = {
    ID: number
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeeCreateOrConnectWithoutStudentInput = {
    where: employeeWhereUniqueInput
    create: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput>
  }

  export type employeeCreateManyStudentInputEnvelope = {
    data: employeeCreateManyStudentInput | employeeCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type cartItemsUpsertWithWhereUniqueWithoutStudentInput = {
    where: cartItemsWhereUniqueInput
    update: XOR<cartItemsUpdateWithoutStudentInput, cartItemsUncheckedUpdateWithoutStudentInput>
    create: XOR<cartItemsCreateWithoutStudentInput, cartItemsUncheckedCreateWithoutStudentInput>
  }

  export type cartItemsUpdateWithWhereUniqueWithoutStudentInput = {
    where: cartItemsWhereUniqueInput
    data: XOR<cartItemsUpdateWithoutStudentInput, cartItemsUncheckedUpdateWithoutStudentInput>
  }

  export type cartItemsUpdateManyWithWhereWithoutStudentInput = {
    where: cartItemsScalarWhereInput
    data: XOR<cartItemsUpdateManyMutationInput, cartItemsUncheckedUpdateManyWithoutStudentInput>
  }

  export type checkoutUpsertWithWhereUniqueWithoutStudentInput = {
    where: checkoutWhereUniqueInput
    update: XOR<checkoutUpdateWithoutStudentInput, checkoutUncheckedUpdateWithoutStudentInput>
    create: XOR<checkoutCreateWithoutStudentInput, checkoutUncheckedCreateWithoutStudentInput>
  }

  export type checkoutUpdateWithWhereUniqueWithoutStudentInput = {
    where: checkoutWhereUniqueInput
    data: XOR<checkoutUpdateWithoutStudentInput, checkoutUncheckedUpdateWithoutStudentInput>
  }

  export type checkoutUpdateManyWithWhereWithoutStudentInput = {
    where: checkoutScalarWhereInput
    data: XOR<checkoutUpdateManyMutationInput, checkoutUncheckedUpdateManyWithoutStudentInput>
  }

  export type employeeUpsertWithWhereUniqueWithoutStudentInput = {
    where: employeeWhereUniqueInput
    update: XOR<employeeUpdateWithoutStudentInput, employeeUncheckedUpdateWithoutStudentInput>
    create: XOR<employeeCreateWithoutStudentInput, employeeUncheckedCreateWithoutStudentInput>
  }

  export type employeeUpdateWithWhereUniqueWithoutStudentInput = {
    where: employeeWhereUniqueInput
    data: XOR<employeeUpdateWithoutStudentInput, employeeUncheckedUpdateWithoutStudentInput>
  }

  export type employeeUpdateManyWithWhereWithoutStudentInput = {
    where: employeeScalarWhereInput
    data: XOR<employeeUpdateManyMutationInput, employeeUncheckedUpdateManyWithoutStudentInput>
  }

  export type employeeScalarWhereInput = {
    AND?: employeeScalarWhereInput | employeeScalarWhereInput[]
    OR?: employeeScalarWhereInput[]
    NOT?: employeeScalarWhereInput | employeeScalarWhereInput[]
    ID?: IntFilter<"employee"> | number
    studentID?: StringNullableFilter<"employee"> | string | null
    hoursWorked?: IntNullableFilter<"employee"> | number | null
    isPaid?: BoolNullableFilter<"employee"> | boolean | null
    salary?: DecimalNullableFilter<"employee"> | Decimal | DecimalJsLike | number | string | null
  }

  export type itemCreateManyCategoriesInput = {
    itemID: number
    name?: string | null
    value?: number | null
    imgURL?: string | null
    stock?: number | null
    expirationDate?: Date | string | null
  }

  export type itemUpdateWithoutCategoriesInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUpdateManyWithoutItemNestedInput
    checkoutItems?: checkoutItemsUpdateManyWithoutItemNestedInput
  }

  export type itemUncheckedUpdateWithoutCategoriesInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cartItems?: cartItemsUncheckedUpdateManyWithoutItemNestedInput
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutItemNestedInput
  }

  export type itemUncheckedUpdateManyWithoutCategoriesInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    imgURL?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type checkoutItemsCreateManyCheckoutInput = {
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsUpdateWithoutCheckoutInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    item?: itemUpdateOneRequiredWithoutCheckoutItemsNestedInput
  }

  export type checkoutItemsUncheckedUpdateWithoutCheckoutInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutItemsUncheckedUpdateManyWithoutCheckoutInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutCreateManyEmployeeInput = {
    transactionID: number
    customerID?: string | null
    checkoutDate?: Date | string | null
  }

  export type checkoutUpdateWithoutEmployeeInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    student?: studentUpdateOneWithoutCheckoutNestedInput
    checkoutItems?: checkoutItemsUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateWithoutEmployeeInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    customerID?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateManyWithoutEmployeeInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    customerID?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type cartItemsCreateManyItemInput = {
    cartID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutItemsCreateManyItemInput = {
    transactionID: number
    quantity?: number | null
    value?: number | null
  }

  export type cartItemsUpdateWithoutItemInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    student?: studentUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type cartItemsUncheckedUpdateWithoutItemInput = {
    cartID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsUncheckedUpdateManyWithoutItemInput = {
    cartID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutItemsUpdateWithoutItemInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    checkout?: checkoutUpdateOneRequiredWithoutCheckoutItemsNestedInput
  }

  export type checkoutItemsUncheckedUpdateWithoutItemInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutItemsUncheckedUpdateManyWithoutItemInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsCreateManyStudentInput = {
    itemID: number
    quantity?: number | null
    value?: number | null
  }

  export type checkoutCreateManyStudentInput = {
    transactionID: number
    workerID?: number | null
    checkoutDate?: Date | string | null
  }

  export type employeeCreateManyStudentInput = {
    ID: number
    hoursWorked?: number | null
    isPaid?: boolean | null
    salary?: Decimal | DecimalJsLike | number | string | null
  }

  export type cartItemsUpdateWithoutStudentInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
    item?: itemUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type cartItemsUncheckedUpdateWithoutStudentInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartItemsUncheckedUpdateManyWithoutStudentInput = {
    itemID?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type checkoutUpdateWithoutStudentInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: employeeUpdateOneWithoutCheckoutNestedInput
    checkoutItems?: checkoutItemsUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateWithoutStudentInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    workerID?: NullableIntFieldUpdateOperationsInput | number | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkoutItems?: checkoutItemsUncheckedUpdateManyWithoutCheckoutNestedInput
  }

  export type checkoutUncheckedUpdateManyWithoutStudentInput = {
    transactionID?: IntFieldUpdateOperationsInput | number
    workerID?: NullableIntFieldUpdateOperationsInput | number | null
    checkoutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type employeeUpdateWithoutStudentInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUpdateManyWithoutEmployeeNestedInput
  }

  export type employeeUncheckedUpdateWithoutStudentInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checkout?: checkoutUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeeUncheckedUpdateManyWithoutStudentInput = {
    ID?: IntFieldUpdateOperationsInput | number
    hoursWorked?: NullableIntFieldUpdateOperationsInput | number | null
    isPaid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CheckoutCountOutputTypeDefaultArgs instead
     */
    export type CheckoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CheckoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemCountOutputTypeDefaultArgs instead
     */
    export type ItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cartItemsDefaultArgs instead
     */
    export type cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cartItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use checkoutDefaultArgs instead
     */
    export type checkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = checkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use checkoutItemsDefaultArgs instead
     */
    export type checkoutItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = checkoutItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use donorsDefaultArgs instead
     */
    export type donorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = donorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use employeeDefaultArgs instead
     */
    export type employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = employeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use itemDefaultArgs instead
     */
    export type itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = itemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use studentDefaultArgs instead
     */
    export type studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = studentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}