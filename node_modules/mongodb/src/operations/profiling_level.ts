import type { Db } from '../db';
<<<<<<< HEAD
import { MongoRuntimeError } from '../error';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import type { Callback } from '../utils';
import { CommandCallbackOperation, type CommandOperationOptions } from './command';
=======
import { MongoUnexpectedServerResponseError } from '../error';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import { CommandOperation, type CommandOperationOptions } from './command';
>>>>>>> 7422a5105b3ad55a79d69991a305f45b144d302d

/** @public */
export type ProfilingLevelOptions = CommandOperationOptions;

/** @internal */
<<<<<<< HEAD
export class ProfilingLevelOperation extends CommandCallbackOperation<string> {
=======
export class ProfilingLevelOperation extends CommandOperation<string> {
>>>>>>> 7422a5105b3ad55a79d69991a305f45b144d302d
  override options: ProfilingLevelOptions;

  constructor(db: Db, options: ProfilingLevelOptions) {
    super(db, options);
    this.options = options;
  }

<<<<<<< HEAD
  override executeCallback(
    server: Server,
    session: ClientSession | undefined,
    callback: Callback<string>
  ): void {
    super.executeCommandCallback(server, session, { profile: -1 }, (err, doc) => {
      if (err == null && doc.ok === 1) {
        const was = doc.was;
        if (was === 0) return callback(undefined, 'off');
        if (was === 1) return callback(undefined, 'slow_only');
        if (was === 2) return callback(undefined, 'all');
        // TODO(NODE-3483)
        return callback(new MongoRuntimeError(`Illegal profiling level value ${was}`));
      } else {
        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError
        err != null ? callback(err) : callback(new MongoRuntimeError('Error with profile command'));
      }
    });
=======
  override async execute(server: Server, session: ClientSession | undefined): Promise<string> {
    const doc = await super.executeCommand(server, session, { profile: -1 });
    if (doc.ok === 1) {
      const was = doc.was;
      if (was === 0) return 'off';
      if (was === 1) return 'slow_only';
      if (was === 2) return 'all';
      throw new MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);
    } else {
      throw new MongoUnexpectedServerResponseError('Error with profile command');
    }
>>>>>>> 7422a5105b3ad55a79d69991a305f45b144d302d
  }
}
